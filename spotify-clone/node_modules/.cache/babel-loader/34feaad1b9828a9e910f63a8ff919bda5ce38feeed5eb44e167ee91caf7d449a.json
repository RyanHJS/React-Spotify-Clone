{"ast":null,"code":"import hex2hsl from './hex2hsl';\nimport hex2rgb from './hex2rgb';\nimport hsl2hex from './hsl2hex';\nimport hsl2rgb from './hsl2rgb';\nimport isValidHex from './is-valid-hex';\nimport { cssColors } from './modules/css-colors';\nimport { invariant, isString, messages } from './modules/utils';\nimport rgb2hex from './rgb2hex';\nimport rgb2hsl from './rgb2hsl';\n/**\n * Parse CSS color\n */\nexport default function parseCSS(input, output) {\n  invariant(isString(input), messages.inputString);\n  let result;\n  const parsedInput = cssColors[input.toLowerCase()] || input;\n  if (isValidHex(parsedInput)) {\n    switch (output) {\n      case 'hsl':\n        {\n          result = hex2hsl(parsedInput);\n          break;\n        }\n      case 'rgb':\n        {\n          result = hex2rgb(parsedInput);\n          break;\n        }\n      default:\n        {\n          result = parsedInput;\n          break;\n        }\n    }\n  } else {\n    // TODO: improve the pattern to require 3 groups\n    const matches = parsedInput.match(/(hsl|rgb)a?\\((\\d+)(?:,\\s*|\\s+)(\\d+)%?(?:,\\s*|\\s+)(\\d+)%?[^)]*\\)/i);\n    invariant(Array.isArray(matches), 'invalid CSS string');\n    invariant(matches.length === 5, 'invalid CSS string');\n    const [, model, hORr, sORg, lORb] = matches;\n    let hex;\n    let hsl;\n    let rgb;\n    if (model === 'hsl') {\n      hsl = {\n        h: parseInt(hORr, 10),\n        s: parseInt(sORg, 10),\n        l: parseInt(lORb, 10)\n      };\n      hex = hsl2hex(hsl);\n      rgb = hsl2rgb(hsl);\n    } else {\n      rgb = {\n        r: parseInt(hORr, 10),\n        g: parseInt(sORg, 10),\n        b: parseInt(lORb, 10)\n      };\n      hex = rgb2hex(rgb);\n      hsl = rgb2hsl(rgb);\n    }\n    switch (output) {\n      case 'hsl':\n        {\n          result = hsl;\n          break;\n        }\n      case 'rgb':\n        {\n          result = rgb;\n          break;\n        }\n      case 'hex':\n      default:\n        {\n          result = hex;\n          break;\n        }\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["hex2hsl","hex2rgb","hsl2hex","hsl2rgb","isValidHex","cssColors","invariant","isString","messages","rgb2hex","rgb2hsl","parseCSS","input","output","inputString","result","parsedInput","toLowerCase","matches","match","Array","isArray","length","model","hORr","sORg","lORb","hex","hsl","rgb","h","parseInt","s","l","r","g","b"],"sources":["/Users/ryanhe/Desktop/Javascript/React-Spotify-Clone/spotify-clone/node_modules/colorizr/src/parse-css.ts"],"sourcesContent":["import hex2hsl from './hex2hsl';\nimport hex2rgb from './hex2rgb';\nimport hsl2hex from './hsl2hex';\nimport hsl2rgb from './hsl2rgb';\nimport isValidHex from './is-valid-hex';\nimport { cssColors } from './modules/css-colors';\nimport { invariant, isString, messages } from './modules/utils';\nimport rgb2hex from './rgb2hex';\nimport rgb2hsl from './rgb2hsl';\nimport { ColorTypes, Return } from './types';\n\n/**\n * Parse CSS color\n */\nexport default function parseCSS<T extends ColorTypes = 'hex'>(\n  input: unknown,\n  output?: T,\n): Return<T> {\n  invariant(isString(input), messages.inputString);\n  let result: any;\n\n  const parsedInput = cssColors[input.toLowerCase() as keyof typeof cssColors] || input;\n\n  if (isValidHex(parsedInput)) {\n    switch (output) {\n      case 'hsl': {\n        result = hex2hsl(parsedInput);\n        break;\n      }\n      case 'rgb': {\n        result = hex2rgb(parsedInput);\n        break;\n      }\n      default: {\n        result = parsedInput;\n        break;\n      }\n    }\n  } else {\n    // TODO: improve the pattern to require 3 groups\n    const matches = parsedInput.match(\n      /(hsl|rgb)a?\\((\\d+)(?:,\\s*|\\s+)(\\d+)%?(?:,\\s*|\\s+)(\\d+)%?[^)]*\\)/i,\n    );\n\n    invariant(Array.isArray(matches), 'invalid CSS string');\n    invariant(matches.length === 5, 'invalid CSS string');\n\n    const [, model, hORr, sORg, lORb] = matches;\n    let hex;\n    let hsl;\n    let rgb;\n\n    if (model === 'hsl') {\n      hsl = {\n        h: parseInt(hORr, 10),\n        s: parseInt(sORg, 10),\n        l: parseInt(lORb, 10),\n      };\n      hex = hsl2hex(hsl);\n      rgb = hsl2rgb(hsl);\n    } else {\n      rgb = {\n        r: parseInt(hORr, 10),\n        g: parseInt(sORg, 10),\n        b: parseInt(lORb, 10),\n      };\n      hex = rgb2hex(rgb);\n      hsl = rgb2hsl(rgb);\n    }\n\n    switch (output) {\n      case 'hsl': {\n        result = hsl;\n        break;\n      }\n      case 'rgb': {\n        result = rgb;\n        break;\n      }\n\n      case 'hex':\n      default: {\n        result = hex;\n        break;\n      }\n    }\n  }\n\n  return result as Return<T>;\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,gBAAgB;AACvC,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,iBAAiB;AAC/D,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAG/B;;;AAGA,eAAc,SAAUC,QAAQA,CAC9BC,KAAc,EACdC,MAAU;EAEVP,SAAS,CAACC,QAAQ,CAACK,KAAK,CAAC,EAAEJ,QAAQ,CAACM,WAAW,CAAC;EAChD,IAAIC,MAAW;EAEf,MAAMC,WAAW,GAAGX,SAAS,CAACO,KAAK,CAACK,WAAW,EAA4B,CAAC,IAAIL,KAAK;EAErF,IAAIR,UAAU,CAACY,WAAW,CAAC,EAAE;IAC3B,QAAQH,MAAM;MACZ,KAAK,KAAK;QAAE;UACVE,MAAM,GAAGf,OAAO,CAACgB,WAAW,CAAC;UAC7B;;MAEF,KAAK,KAAK;QAAE;UACVD,MAAM,GAAGd,OAAO,CAACe,WAAW,CAAC;UAC7B;;MAEF;QAAS;UACPD,MAAM,GAAGC,WAAW;UACpB;;IACD;GAEJ,MAAM;IACL;IACA,MAAME,OAAO,GAAGF,WAAW,CAACG,KAAK,CAC/B,kEAAkE,CACnE;IAEDb,SAAS,CAACc,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE,oBAAoB,CAAC;IACvDZ,SAAS,CAACY,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE,oBAAoB,CAAC;IAErD,MAAM,GAAGC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC,GAAGR,OAAO;IAC3C,IAAIS,GAAG;IACP,IAAIC,GAAG;IACP,IAAIC,GAAG;IAEP,IAAIN,KAAK,KAAK,KAAK,EAAE;MACnBK,GAAG,GAAG;QACJE,CAAC,EAAEC,QAAQ,CAACP,IAAI,EAAE,EAAE,CAAC;QACrBQ,CAAC,EAAED,QAAQ,CAACN,IAAI,EAAE,EAAE,CAAC;QACrBQ,CAAC,EAAEF,QAAQ,CAACL,IAAI,EAAE,EAAE;OACrB;MACDC,GAAG,GAAGzB,OAAO,CAAC0B,GAAG,CAAC;MAClBC,GAAG,GAAG1B,OAAO,CAACyB,GAAG,CAAC;KACnB,MAAM;MACLC,GAAG,GAAG;QACJK,CAAC,EAAEH,QAAQ,CAACP,IAAI,EAAE,EAAE,CAAC;QACrBW,CAAC,EAAEJ,QAAQ,CAACN,IAAI,EAAE,EAAE,CAAC;QACrBW,CAAC,EAAEL,QAAQ,CAACL,IAAI,EAAE,EAAE;OACrB;MACDC,GAAG,GAAGlB,OAAO,CAACoB,GAAG,CAAC;MAClBD,GAAG,GAAGlB,OAAO,CAACmB,GAAG,CAAC;;IAGpB,QAAQhB,MAAM;MACZ,KAAK,KAAK;QAAE;UACVE,MAAM,GAAGa,GAAG;UACZ;;MAEF,KAAK,KAAK;QAAE;UACVb,MAAM,GAAGc,GAAG;UACZ;;MAGF,KAAK,KAAK;MACV;QAAS;UACPd,MAAM,GAAGY,GAAG;UACZ;;IACD;;EAIL,OAAOZ,MAAmB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}