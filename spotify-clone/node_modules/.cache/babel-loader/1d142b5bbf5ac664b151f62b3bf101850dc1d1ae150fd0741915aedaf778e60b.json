{"ast":null,"code":"/**\n * @todo https://developer.spotify.com/documentation/web-playback-sdk/reference/\n */\n\n/**\n * Generic method type.\n */\n\n/** @hidden */\n\n/**\n * Status events.\n */\n\n/**\n * State change event.\n */\n\n/**\n * Error events.\n */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/**\n * Event callbacks.\n */\n\n/**\n * An event listener for when an error occurs.\n */\n\n/**\n * An event listener for when the playback state changes.\n */\n\n/**\n * An event listener for when the player status changes.\n */\n\n/**\n * Event listeners.\n */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/**\n * Different Spotify devices.\n */\nlet SpotifyDeviceType;\n(function (SpotifyDeviceType) {\n  SpotifyDeviceType[\"Computer\"] = \"Computer\";\n  SpotifyDeviceType[\"Tablet\"] = \"Tablet\";\n  SpotifyDeviceType[\"Smartphone\"] = \"Smartphone\";\n  SpotifyDeviceType[\"Speaker\"] = \"Speaker\";\n  SpotifyDeviceType[\"TV\"] = \"TV\";\n  SpotifyDeviceType[\"AVR\"] = \"AVR\";\n  SpotifyDeviceType[\"STB\"] = \"STB\";\n  SpotifyDeviceType[\"AudioDongle\"] = \"AudioDongle\";\n  SpotifyDeviceType[\"GameConsole\"] = \"GameConsole\";\n  SpotifyDeviceType[\"CastVideo\"] = \"CastVideo\";\n  SpotifyDeviceType[\"CastAudio\"] = \"CastAudio\";\n  SpotifyDeviceType[\"Automobile\"] = \"Automobile\";\n  SpotifyDeviceType[\"Unknown\"] = \"Unknown\";\n})(SpotifyDeviceType || (SpotifyDeviceType = {}));\n\n/** @hidden */\n\nconst EMPTY_TRACK = {\n  artists: [],\n  duration: 0,\n  id: '',\n  name: '',\n  image: '',\n  uri: ''\n};\n/**\n * Spotify Web Player.\n */\n\nclass SpotifyPlayer {\n  _baseUrl = 'https://api.spotify.com/v1/me';\n  _deviceId = '';\n  _token = '';\n  _playing = false;\n  _ready = false;\n  _position = 0;\n  _track = EMPTY_TRACK;\n  _playlists = [];\n  _errorListeners = [];\n  _stateListeners = [];\n  _statusListeners = [];\n  /**\n   * Required scopes for a token.\n   */\n\n  scopes = ['playlist-read-collaborative', 'playlist-read-private', 'streaming', 'user-read-email', 'user-read-private', 'user-library-read', 'user-library-modify', 'user-read-playback-state', 'user-modify-playback-state'];\n  /**\n   * The Spotify authorization token.\n   */\n\n  get token() {\n    return this._token;\n  }\n  /**\n   * Indicates if a media is playing.\n   */\n\n  get playing() {\n    return this._playing;\n  }\n  /**\n   * Indicates if the player has been initialized and is ready for playing.\n   */\n\n  get ready() {\n    return this._ready;\n  }\n  /**\n   * Current position.\n   */\n\n  get position() {\n    return this._position;\n  }\n  /**\n   * The current track.\n   */\n\n  get track() {\n    return this._track;\n  }\n  /**\n   * A list of playlists owned by the user.\n   *\n   * Call {@link getUsersPlaylists} to populate this list.\n   */\n\n  get playlists() {\n    return this._playlists;\n  }\n  /**\n   * Create a new SpotifyPlayer instance.\n   * @param name Player name.\n   * @param volume Volume level. (default = 1.0)\n   */\n\n  constructor(name) {\n    let volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;\n    this._name = name;\n    this._volume = volume;\n    this.handlePlayerStateChanges = this.handlePlayerStateChanges.bind(this);\n    this.handlePlayerErrors = this.handlePlayerErrors.bind(this);\n  }\n  /**\n   * Connect to Spotify.\n   * @param token Spotify token.\n   * @returns `true` if successful, `false` otherwise.\n   */\n\n  async connect(token) {\n    this._token = token;\n    await Promise.all([this.waitForReady(), SpotifyPlayer.loadSpotifyPlayer()]);\n    const name = this._name;\n    const volume = this._volume; // @ts-ignore\n\n    this._player = new window.Spotify.Player({\n      name,\n      volume,\n      getOAuthToken: cb => {\n        cb(token);\n      }\n    });\n    return this.waitForConnection();\n  }\n  /**\n   * Wait for the player to connect and emit the 'ready' signal.\n   *\n   * @returns Promise that resolves to a boolean indicating if the connection\n   * was successful.\n   */\n\n  waitForConnection() {\n    if (!this._player) {\n      return Promise.resolve(false);\n    }\n    const player = this._player;\n    this._player.addListener('player_state_changed', this.handlePlayerStateChanges);\n    this._player.addListener('initialization_error', error => {\n      this.handlePlayerErrors('initialization_error', error);\n    });\n    this._player.addListener('authentication_error', error => {\n      this.handlePlayerErrors('authentication_error', error);\n    });\n    this._player.addListener('account_error', error => {\n      this.handlePlayerErrors('account_error', error);\n    });\n    this._player.addListener('playback_error', error => {\n      this.handlePlayerErrors('playback_error', error);\n    });\n    const deviceConnected = deviceId => {\n      this._deviceId = deviceId;\n      this._ready = true;\n    };\n    const deviceDisconnected = () => {\n      this._ready = false;\n    };\n    return new Promise(resolve => {\n      player.addListener('ready', async _ref => {\n        let {\n          device_id\n        } = _ref;\n        deviceConnected(device_id);\n        for (const cb of this._statusListeners) {\n          cb('ready');\n        }\n        resolve(true);\n      });\n      player.addListener('not_ready', () => {\n        deviceDisconnected();\n        for (const cb of this._statusListeners) {\n          cb('not_ready');\n        }\n        resolve(false);\n      });\n      player.connect(); //.then((ret: boolean) => resolve(ret));\n    });\n  }\n  /** @hidden */\n\n  static loadSpotifyPlayer() {\n    return new Promise((resolve, reject) => {\n      const scriptTag = document.getElementById('spotify-player');\n      if (!scriptTag) {\n        const script = document.createElement('script');\n        script.id = 'spotify-player';\n        script.type = 'text/javascript';\n        script.async = false;\n        script.defer = true;\n        script.src = 'https://sdk.scdn.co/spotify-player.js';\n        script.onload = () => resolve();\n        script.onerror = () => reject(new Error('Error loading spotify-player.js'));\n        document.head.appendChild(script);\n      } else {\n        resolve();\n      }\n    });\n  }\n  /**\n   * Appends a script to spotify-player.js to the DOM.\n   * @returns Promise that resolves when the web player script has been loaded.\n   */\n\n  waitForReady() {\n    return new Promise(resolve => {\n      const initialize = () => {\n        resolve();\n      };\n      if (!window.onSpotifyWebPlaybackSDKReady) {\n        window.onSpotifyWebPlaybackSDKReady = initialize;\n      } else {\n        initialize();\n      }\n    });\n  }\n  /**\n   * Begin playback.\n   */\n\n  async play(items) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let body;\n    if (Array.isArray(items) && items.length) {\n      body = JSON.stringify({\n        uris: items,\n        offset: {\n          position: offset\n        }\n      });\n    } else if (items) {\n      const isArtist = items.indexOf('artist') >= 0;\n      const isTrack = items.indexOf('track') >= 0;\n      let position;\n      if (!isArtist) {\n        position = {\n          position: offset\n        };\n      }\n      if (isTrack) {\n        body = JSON.stringify({\n          uris: [items],\n          offset: position\n        });\n      } else {\n        body = JSON.stringify({\n          context_uri: items,\n          offset: position\n        });\n      }\n    }\n    await fetch(`${this._baseUrl}/player/play?device_id=${this._deviceId}`, {\n      method: 'PUT',\n      body,\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Pause playback.\n   */\n\n  async pause() {\n    await fetch(`${this._baseUrl}/player/pause`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Skip to the previous track.\n   */\n\n  async previous() {\n    await fetch(`${this._baseUrl}/player/previous`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Skip to the next track.\n   */\n\n  async next() {\n    await fetch(`${this._baseUrl}/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Seek to position.\n   * @param position Starting position (in milliseconds).\n   */\n\n  async seek(position) {\n    await fetch(`${this._baseUrl}/player/seek?position_ms=${position}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Get current playback state.\n   */\n\n  async getPlaybackState() {\n    const response = await fetch(`${this._baseUrl}/player`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.status === 204) {\n      return null;\n    }\n    return response.json();\n  }\n  async getPlaylists() {\n    let url = `${this._baseUrl}/playlists?limit=50`;\n    let items = []; // Get list of playlists.\n\n    while (true) {\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${this._token}`\n        }\n      });\n      const data = await response.json();\n      items = items.concat(data.items);\n      if (data.next === null) {\n        break;\n      }\n      url = data.next;\n    } // Get playlist items.\n\n    return Promise.all(items.map(async item => {\n      let url = `${item.tracks.href}?limit=100`;\n      let tracks = [];\n      while (true) {\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': `Bearer ${this._token}`\n          }\n        });\n        const data = await response.json();\n        tracks = tracks.concat(data.items);\n        if (data.next === null) {\n          break;\n        }\n        url = data.next;\n      }\n      const playlist = {\n        id: item.id,\n        images: item.images,\n        name: item.name,\n        tracks: tracks\n      };\n      return playlist;\n    }));\n  }\n  async getFavorites() {\n    const response = await fetch(`${this._baseUrl}/tracks?limit=50`, {\n      headers: {\n        'Authorization': `Bearer ${this._token}`\n      }\n    });\n    const data = await response.json();\n    const favorites = {\n      name: 'Your Music',\n      tracks: data.items\n    };\n    return favorites;\n  }\n  /**\n   * Get a list of playlists owned by the current user.\n   */\n\n  async getUsersPlaylists() {\n    let [playlists, favorites] = await Promise.all([this.getPlaylists(), this.getFavorites()]); // Set \"Your Music\" first.\n\n    playlists = [favorites, ...playlists];\n    playlists = playlists.map(item => ({\n      name: item.name,\n      tracks: item.tracks.map(_ref2 => {\n        let {\n          track\n        } = _ref2;\n        return {\n          artists: track.artists.map(_ref3 => {\n            let {\n              id,\n              name\n            } = _ref3;\n            return {\n              id,\n              name\n            };\n          }),\n          duration: track.duration_ms,\n          id: track.id,\n          image: track.album.images.find(() => true),\n          name: track.name,\n          uri: track.uri\n        };\n      })\n    }));\n    return playlists;\n  }\n  /**\n   * Change the Spotify access token.\n   *\n   * Useful for handling refreshes.\n   * @param token New access token.\n   */\n\n  setToken(token) {\n    this._token = token;\n  }\n  /**\n   * Set the current volume level\n   * @param volume Volume percentage from 0 to 100.\n   */\n\n  async setVolume(volume) {\n    const url = `${this._baseUrl}/player/volume?volume_percent=${volume}`;\n    await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Emitted whenever an error has occurred.\n   * @event\n   */\n\n  /** @hidden */\n  addListener(event, cb) {\n    switch (event) {\n      case 'error':\n        this._errorListeners.push(cb);\n        break;\n      case 'state':\n        this._stateListeners.push(cb);\n        break;\n      case 'ready':\n        this._statusListeners.push(cb);\n        break;\n    }\n  }\n  /**\n   * Removes a single (or all) error listeners.\n   */\n\n  /** @hidden */\n  removeListener(event, cb) {\n    const filter = fn => {\n      if (cb) {\n        return fn !== cb;\n      } else {\n        return false;\n      }\n    };\n    switch (event) {\n      case 'error':\n        this._errorListeners = this._errorListeners.filter(filter);\n        break;\n      case 'state':\n        this._stateListeners = this._stateListeners.filter(filter);\n        break;\n      case 'ready':\n        this._statusListeners = this._statusListeners.filter(filter);\n        break;\n    }\n  }\n  /** @hidden */\n\n  getAlbumImage(album) {\n    const width = Math.min(...album.images.map(d => d.width));\n    const thumb = album.images.find(d => d.width === width) || {};\n    return thumb.url;\n  }\n  /** @hidden */\n\n  async handlePlayerStateChanges(state) {\n    if (!state) {\n      this._track = EMPTY_TRACK;\n      this._position = 0;\n      this._playing = false;\n      for (const cb of this._stateListeners) {\n        cb(state);\n      }\n      return;\n    }\n    const {\n      paused,\n      position,\n      track_window: {\n        current_track: {\n          album,\n          artists,\n          duration_ms,\n          id,\n          name,\n          uri\n        }\n      }\n    } = state;\n    this._playing = !paused;\n    this._position = position;\n    this._track = {\n      artists: artists.map(_ref4 => {\n        let {\n          name\n        } = _ref4;\n        return name;\n      }),\n      duration: duration_ms,\n      image: this.getAlbumImage(album),\n      id,\n      name,\n      uri\n    };\n    for (const cb of this._stateListeners) {\n      cb(state);\n    }\n  }\n  /** @hidden */\n\n  handlePlayerErrors(type, _error) {\n    this._ready = false;\n    if (this._player && type !== 'playback_error') {\n      this._player.removeListener('player_state_changed');\n      this._player.removeListener('initialization_error');\n      this._player.removeListener('authentication_error');\n      this._player.removeListener('account_error');\n      this._player.disconnect();\n    }\n    for (const cb of this._errorListeners) {\n      cb(type);\n    }\n  }\n}\nexport { SpotifyDeviceType, SpotifyPlayer as default };","map":{"version":3,"names":["SpotifyDeviceType","EMPTY_TRACK","artists","duration","id","name","image","uri","SpotifyPlayer","_baseUrl","_deviceId","_token","_playing","_ready","_position","_track","_playlists","_errorListeners","_stateListeners","_statusListeners","scopes","token","playing","ready","position","track","playlists","constructor","volume","arguments","length","undefined","_name","_volume","handlePlayerStateChanges","bind","handlePlayerErrors","connect","Promise","all","waitForReady","loadSpotifyPlayer","_player","window","Spotify","Player","getOAuthToken","cb","waitForConnection","resolve","player","addListener","error","deviceConnected","deviceId","deviceDisconnected","_ref","device_id","reject","scriptTag","document","getElementById","script","createElement","type","async","defer","src","onload","onerror","Error","head","appendChild","initialize","onSpotifyWebPlaybackSDKReady","play","items","offset","body","Array","isArray","JSON","stringify","uris","isArtist","indexOf","isTrack","context_uri","fetch","method","headers","pause","previous","next","seek","getPlaybackState","response","status","json","getPlaylists","url","data","concat","map","item","tracks","href","playlist","images","getFavorites","favorites","getUsersPlaylists","_ref2","_ref3","duration_ms","album","find","setToken","setVolume","event","push","removeListener","filter","fn","getAlbumImage","width","Math","min","d","thumb","state","paused","track_window","current_track","_ref4","_error","disconnect","default"],"sources":["/Users/ryanhe/Desktop/Javascript/React-Spotify-Clone/spotify-clone/node_modules/spotify-web-playback/dist/index.mjs"],"sourcesContent":["/**\n * @todo https://developer.spotify.com/documentation/web-playback-sdk/reference/\n */\n\n/**\n * Generic method type.\n */\n\n/** @hidden */\n\n/**\n * Status events.\n */\n\n/**\n * State change event.\n */\n\n/**\n * Error events.\n */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/**\n * Event callbacks.\n */\n\n/**\n * An event listener for when an error occurs.\n */\n\n/**\n * An event listener for when the playback state changes.\n */\n\n/**\n * An event listener for when the player status changes.\n */\n\n/**\n * Event listeners.\n */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/** @hidden */\n\n/**\n * Different Spotify devices.\n */\nlet SpotifyDeviceType;\n\n(function (SpotifyDeviceType) {\n  SpotifyDeviceType[\"Computer\"] = \"Computer\";\n  SpotifyDeviceType[\"Tablet\"] = \"Tablet\";\n  SpotifyDeviceType[\"Smartphone\"] = \"Smartphone\";\n  SpotifyDeviceType[\"Speaker\"] = \"Speaker\";\n  SpotifyDeviceType[\"TV\"] = \"TV\";\n  SpotifyDeviceType[\"AVR\"] = \"AVR\";\n  SpotifyDeviceType[\"STB\"] = \"STB\";\n  SpotifyDeviceType[\"AudioDongle\"] = \"AudioDongle\";\n  SpotifyDeviceType[\"GameConsole\"] = \"GameConsole\";\n  SpotifyDeviceType[\"CastVideo\"] = \"CastVideo\";\n  SpotifyDeviceType[\"CastAudio\"] = \"CastAudio\";\n  SpotifyDeviceType[\"Automobile\"] = \"Automobile\";\n  SpotifyDeviceType[\"Unknown\"] = \"Unknown\";\n})(SpotifyDeviceType || (SpotifyDeviceType = {}));\n\n/** @hidden */\n\nconst EMPTY_TRACK = {\n  artists: [],\n  duration: 0,\n  id: '',\n  name: '',\n  image: '',\n  uri: ''\n};\n/**\n * Spotify Web Player.\n */\n\nclass SpotifyPlayer {\n  _baseUrl = 'https://api.spotify.com/v1/me';\n  _deviceId = '';\n  _token = '';\n  _playing = false;\n  _ready = false;\n  _position = 0;\n  _track = EMPTY_TRACK;\n  _playlists = [];\n  _errorListeners = [];\n  _stateListeners = [];\n  _statusListeners = [];\n  /**\n   * Required scopes for a token.\n   */\n\n  scopes = ['playlist-read-collaborative', 'playlist-read-private', 'streaming', 'user-read-email', 'user-read-private', 'user-library-read', 'user-library-modify', 'user-read-playback-state', 'user-modify-playback-state'];\n  /**\n   * The Spotify authorization token.\n   */\n\n  get token() {\n    return this._token;\n  }\n  /**\n   * Indicates if a media is playing.\n   */\n\n\n  get playing() {\n    return this._playing;\n  }\n  /**\n   * Indicates if the player has been initialized and is ready for playing.\n   */\n\n\n  get ready() {\n    return this._ready;\n  }\n  /**\n   * Current position.\n   */\n\n\n  get position() {\n    return this._position;\n  }\n  /**\n   * The current track.\n   */\n\n\n  get track() {\n    return this._track;\n  }\n  /**\n   * A list of playlists owned by the user.\n   *\n   * Call {@link getUsersPlaylists} to populate this list.\n   */\n\n\n  get playlists() {\n    return this._playlists;\n  }\n  /**\n   * Create a new SpotifyPlayer instance.\n   * @param name Player name.\n   * @param volume Volume level. (default = 1.0)\n   */\n\n\n  constructor(name, volume = 1.0) {\n    this._name = name;\n    this._volume = volume;\n    this.handlePlayerStateChanges = this.handlePlayerStateChanges.bind(this);\n    this.handlePlayerErrors = this.handlePlayerErrors.bind(this);\n  }\n  /**\n   * Connect to Spotify.\n   * @param token Spotify token.\n   * @returns `true` if successful, `false` otherwise.\n   */\n\n\n  async connect(token) {\n    this._token = token;\n    await Promise.all([this.waitForReady(), SpotifyPlayer.loadSpotifyPlayer()]);\n    const name = this._name;\n    const volume = this._volume; // @ts-ignore\n\n    this._player = new window.Spotify.Player({\n      name,\n      volume,\n      getOAuthToken: cb => {\n        cb(token);\n      }\n    });\n    return this.waitForConnection();\n  }\n  /**\n   * Wait for the player to connect and emit the 'ready' signal.\n   *\n   * @returns Promise that resolves to a boolean indicating if the connection\n   * was successful.\n   */\n\n\n  waitForConnection() {\n    if (!this._player) {\n      return Promise.resolve(false);\n    }\n\n    const player = this._player;\n\n    this._player.addListener('player_state_changed', this.handlePlayerStateChanges);\n\n    this._player.addListener('initialization_error', error => {\n      this.handlePlayerErrors('initialization_error', error);\n    });\n\n    this._player.addListener('authentication_error', error => {\n      this.handlePlayerErrors('authentication_error', error);\n    });\n\n    this._player.addListener('account_error', error => {\n      this.handlePlayerErrors('account_error', error);\n    });\n\n    this._player.addListener('playback_error', error => {\n      this.handlePlayerErrors('playback_error', error);\n    });\n\n    const deviceConnected = deviceId => {\n      this._deviceId = deviceId;\n      this._ready = true;\n    };\n\n    const deviceDisconnected = () => {\n      this._ready = false;\n    };\n\n    return new Promise(resolve => {\n      player.addListener('ready', async ({\n        device_id\n      }) => {\n        deviceConnected(device_id);\n\n        for (const cb of this._statusListeners) {\n          cb('ready');\n        }\n\n        resolve(true);\n      });\n      player.addListener('not_ready', () => {\n        deviceDisconnected();\n\n        for (const cb of this._statusListeners) {\n          cb('not_ready');\n        }\n\n        resolve(false);\n      });\n      player.connect(); //.then((ret: boolean) => resolve(ret));\n    });\n  }\n  /** @hidden */\n\n\n  static loadSpotifyPlayer() {\n    return new Promise((resolve, reject) => {\n      const scriptTag = document.getElementById('spotify-player');\n\n      if (!scriptTag) {\n        const script = document.createElement('script');\n        script.id = 'spotify-player';\n        script.type = 'text/javascript';\n        script.async = false;\n        script.defer = true;\n        script.src = 'https://sdk.scdn.co/spotify-player.js';\n\n        script.onload = () => resolve();\n\n        script.onerror = () => reject(new Error('Error loading spotify-player.js'));\n\n        document.head.appendChild(script);\n      } else {\n        resolve();\n      }\n    });\n  }\n  /**\n   * Appends a script to spotify-player.js to the DOM.\n   * @returns Promise that resolves when the web player script has been loaded.\n   */\n\n\n  waitForReady() {\n    return new Promise(resolve => {\n      const initialize = () => {\n        resolve();\n      };\n\n      if (!window.onSpotifyWebPlaybackSDKReady) {\n        window.onSpotifyWebPlaybackSDKReady = initialize;\n      } else {\n        initialize();\n      }\n    });\n  }\n  /**\n   * Begin playback.\n   */\n\n\n  async play(items, offset = 0) {\n    let body;\n\n    if (Array.isArray(items) && items.length) {\n      body = JSON.stringify({\n        uris: items,\n        offset: {\n          position: offset\n        }\n      });\n    } else if (items) {\n      const isArtist = items.indexOf('artist') >= 0;\n      const isTrack = items.indexOf('track') >= 0;\n      let position;\n\n      if (!isArtist) {\n        position = {\n          position: offset\n        };\n      }\n\n      if (isTrack) {\n        body = JSON.stringify({\n          uris: [items],\n          offset: position\n        });\n      } else {\n        body = JSON.stringify({\n          context_uri: items,\n          offset: position\n        });\n      }\n    }\n\n    await fetch(`${this._baseUrl}/player/play?device_id=${this._deviceId}`, {\n      method: 'PUT',\n      body,\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Pause playback.\n   */\n\n\n  async pause() {\n    await fetch(`${this._baseUrl}/player/pause`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Skip to the previous track.\n   */\n\n\n  async previous() {\n    await fetch(`${this._baseUrl}/player/previous`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Skip to the next track.\n   */\n\n\n  async next() {\n    await fetch(`${this._baseUrl}/player/next`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Seek to position.\n   * @param position Starting position (in milliseconds).\n   */\n\n\n  async seek(position) {\n    await fetch(`${this._baseUrl}/player/seek?position_ms=${position}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Get current playback state.\n   */\n\n\n  async getPlaybackState() {\n    const response = await fetch(`${this._baseUrl}/player`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return response.json();\n  }\n\n  async getPlaylists() {\n    let url = `${this._baseUrl}/playlists?limit=50`;\n    let items = []; // Get list of playlists.\n\n    while (true) {\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${this._token}`\n        }\n      });\n      const data = await response.json();\n      items = items.concat(data.items);\n\n      if (data.next === null) {\n        break;\n      }\n\n      url = data.next;\n    } // Get playlist items.\n\n\n    return Promise.all(items.map(async item => {\n      let url = `${item.tracks.href}?limit=100`;\n      let tracks = [];\n\n      while (true) {\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': `Bearer ${this._token}`\n          }\n        });\n        const data = await response.json();\n        tracks = tracks.concat(data.items);\n\n        if (data.next === null) {\n          break;\n        }\n\n        url = data.next;\n      }\n\n      const playlist = {\n        id: item.id,\n        images: item.images,\n        name: item.name,\n        tracks: tracks\n      };\n      return playlist;\n    }));\n  }\n\n  async getFavorites() {\n    const response = await fetch(`${this._baseUrl}/tracks?limit=50`, {\n      headers: {\n        'Authorization': `Bearer ${this._token}`\n      }\n    });\n    const data = await response.json();\n    const favorites = {\n      name: 'Your Music',\n      tracks: data.items\n    };\n    return favorites;\n  }\n  /**\n   * Get a list of playlists owned by the current user.\n   */\n\n\n  async getUsersPlaylists() {\n    let [playlists, favorites] = await Promise.all([this.getPlaylists(), this.getFavorites()]); // Set \"Your Music\" first.\n\n    playlists = [favorites, ...playlists];\n    playlists = playlists.map(item => ({\n      name: item.name,\n      tracks: item.tracks.map(({\n        track\n      }) => ({\n        artists: track.artists.map(({\n          id,\n          name\n        }) => ({\n          id,\n          name\n        })),\n        duration: track.duration_ms,\n        id: track.id,\n        image: track.album.images.find(() => true),\n        name: track.name,\n        uri: track.uri\n      }))\n    }));\n    return playlists;\n  }\n  /**\n   * Change the Spotify access token.\n   *\n   * Useful for handling refreshes.\n   * @param token New access token.\n   */\n\n\n  setToken(token) {\n    this._token = token;\n  }\n  /**\n   * Set the current volume level\n   * @param volume Volume percentage from 0 to 100.\n   */\n\n\n  async setVolume(volume) {\n    const url = `${this._baseUrl}/player/volume?volume_percent=${volume}`;\n    await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  /**\n   * Emitted whenever an error has occurred.\n   * @event\n   */\n\n\n  /** @hidden */\n  addListener(event, cb) {\n    switch (event) {\n      case 'error':\n        this._errorListeners.push(cb);\n\n        break;\n\n      case 'state':\n        this._stateListeners.push(cb);\n\n        break;\n\n      case 'ready':\n        this._statusListeners.push(cb);\n\n        break;\n    }\n  }\n  /**\n   * Removes a single (or all) error listeners.\n   */\n\n\n  /** @hidden */\n  removeListener(event, cb) {\n    const filter = fn => {\n      if (cb) {\n        return fn !== cb;\n      } else {\n        return false;\n      }\n    };\n\n    switch (event) {\n      case 'error':\n        this._errorListeners = this._errorListeners.filter(filter);\n        break;\n\n      case 'state':\n        this._stateListeners = this._stateListeners.filter(filter);\n        break;\n\n      case 'ready':\n        this._statusListeners = this._statusListeners.filter(filter);\n        break;\n    }\n  }\n  /** @hidden */\n\n\n  getAlbumImage(album) {\n    const width = Math.min(...album.images.map(d => d.width));\n    const thumb = album.images.find(d => d.width === width) || {};\n    return thumb.url;\n  }\n  /** @hidden */\n\n\n  async handlePlayerStateChanges(state) {\n    if (!state) {\n      this._track = EMPTY_TRACK;\n      this._position = 0;\n      this._playing = false;\n\n      for (const cb of this._stateListeners) {\n        cb(state);\n      }\n\n      return;\n    }\n\n    const {\n      paused,\n      position,\n      track_window: {\n        current_track: {\n          album,\n          artists,\n          duration_ms,\n          id,\n          name,\n          uri\n        }\n      }\n    } = state;\n    this._playing = !paused;\n    this._position = position;\n    this._track = {\n      artists: artists.map(({\n        name\n      }) => name),\n      duration: duration_ms,\n      image: this.getAlbumImage(album),\n      id,\n      name,\n      uri\n    };\n\n    for (const cb of this._stateListeners) {\n      cb(state);\n    }\n  }\n  /** @hidden */\n\n\n  handlePlayerErrors(type, _error) {\n    this._ready = false;\n\n    if (this._player && type !== 'playback_error') {\n      this._player.removeListener('player_state_changed');\n\n      this._player.removeListener('initialization_error');\n\n      this._player.removeListener('authentication_error');\n\n      this._player.removeListener('account_error');\n\n      this._player.disconnect();\n    }\n\n    for (const cb of this._errorListeners) {\n      cb(type);\n    }\n  }\n\n}\n\nexport { SpotifyDeviceType, SpotifyPlayer as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}