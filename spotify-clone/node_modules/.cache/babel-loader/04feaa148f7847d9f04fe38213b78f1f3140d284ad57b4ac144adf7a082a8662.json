{"ast":null,"code":"import { invariant, isHSL, isPlainObject, isRGB, isString, limit, messages } from './utils';\nimport hex2hsl from '../hex2hsl';\nimport hex2rgb from '../hex2rgb';\nimport hsl2hex from '../hsl2hex';\nimport hsl2rgb from '../hsl2rgb';\nimport isValidHex from '../is-valid-hex';\nimport parseCSS from '../parse-css';\nimport rgb2hex from '../rgb2hex';\nimport rgb2hsl from '../rgb2hsl';\nexport default function parseColor(color) {\n  invariant(!!color, messages.input);\n  const output = {};\n  if (isString(color)) {\n    const hex = parseCSS(color);\n    invariant(isValidHex(hex), 'input is not valid');\n    output.hex = hex;\n    output.rgb = hex2rgb(hex);\n    output.hsl = hex2hsl(hex);\n  } else if (Array.isArray(color)) {\n    output.rgb = {\n      r: limit(color[0], 'r'),\n      g: limit(color[1], 'g'),\n      b: limit(color[2], 'b')\n    };\n    output.hex = rgb2hex(output.rgb);\n    output.hsl = rgb2hsl(output.rgb);\n  } else if (isPlainObject(color)) {\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, 'h'),\n        s: limit(color.s, 's'),\n        l: limit(color.l, 'l')\n      };\n      output.rgb = hsl2rgb(output.hsl);\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, 'r'),\n        g: limit(color.g, 'g'),\n        b: limit(color.b, 'b')\n      };\n      output.hsl = rgb2hsl(output.rgb);\n    } else {\n      throw new Error('invalid color');\n    }\n    output.hex = hsl2hex(output.hsl);\n  } else {\n    throw new Error(messages.input);\n  }\n  return output;\n}","map":{"version":3,"names":["invariant","isHSL","isPlainObject","isRGB","isString","limit","messages","hex2hsl","hex2rgb","hsl2hex","hsl2rgb","isValidHex","parseCSS","rgb2hex","rgb2hsl","parseColor","color","input","output","hex","rgb","hsl","Array","isArray","r","g","b","h","s","l","Error"],"sources":["/Users/ryanhe/Desktop/Javascript/React-Spotify-Clone/spotify-clone/node_modules/colorizr/src/modules/parse-color.ts"],"sourcesContent":["import { invariant, isHSL, isPlainObject, isRGB, isString, limit, messages } from './utils';\n\nimport hex2hsl from '../hex2hsl';\nimport hex2rgb from '../hex2rgb';\nimport hsl2hex from '../hsl2hex';\nimport hsl2rgb from '../hsl2rgb';\nimport isValidHex from '../is-valid-hex';\nimport parseCSS from '../parse-css';\nimport rgb2hex from '../rgb2hex';\nimport rgb2hsl from '../rgb2hsl';\nimport { Colors, HSL, PlainObject, RGB, RGBArray } from '../types';\n\nexport default function parseColor(color: string | HSL | RGB | RGBArray): Colors {\n  invariant(!!color, messages.input);\n\n  const output: PlainObject = {};\n\n  if (isString(color)) {\n    const hex = parseCSS(color) as string;\n\n    invariant(isValidHex(hex), 'input is not valid');\n\n    output.hex = hex;\n    output.rgb = hex2rgb(hex);\n    output.hsl = hex2hsl(hex);\n  } else if (Array.isArray(color)) {\n    output.rgb = {\n      r: limit(color[0], 'r'),\n      g: limit(color[1], 'g'),\n      b: limit(color[2], 'b'),\n    };\n\n    output.hex = rgb2hex(output.rgb);\n    output.hsl = rgb2hsl(output.rgb);\n  } else if (isPlainObject(color)) {\n    if (isHSL(color)) {\n      output.hsl = {\n        h: limit(color.h, 'h'),\n        s: limit(color.s, 's'),\n        l: limit(color.l, 'l'),\n      };\n      output.rgb = hsl2rgb(output.hsl);\n    } else if (isRGB(color)) {\n      output.rgb = {\n        r: limit(color.r, 'r'),\n        g: limit(color.g, 'g'),\n        b: limit(color.b, 'b'),\n      };\n      output.hsl = rgb2hsl(output.rgb);\n    } else {\n      throw new Error('invalid color');\n    }\n\n    output.hex = hsl2hex(output.hsl);\n  } else {\n    throw new Error(messages.input);\n  }\n\n  return output as Colors;\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,KAAK,EAAEC,aAAa,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,SAAS;AAE3F,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,OAAO,MAAM,YAAY;AAGhC,eAAc,SAAUC,UAAUA,CAACC,KAAoC;EACrEhB,SAAS,CAAC,CAAC,CAACgB,KAAK,EAAEV,QAAQ,CAACW,KAAK,CAAC;EAElC,MAAMC,MAAM,GAAgB,EAAE;EAE9B,IAAId,QAAQ,CAACY,KAAK,CAAC,EAAE;IACnB,MAAMG,GAAG,GAAGP,QAAQ,CAACI,KAAK,CAAW;IAErChB,SAAS,CAACW,UAAU,CAACQ,GAAG,CAAC,EAAE,oBAAoB,CAAC;IAEhDD,MAAM,CAACC,GAAG,GAAGA,GAAG;IAChBD,MAAM,CAACE,GAAG,GAAGZ,OAAO,CAACW,GAAG,CAAC;IACzBD,MAAM,CAACG,GAAG,GAAGd,OAAO,CAACY,GAAG,CAAC;GAC1B,MAAM,IAAIG,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;IAC/BE,MAAM,CAACE,GAAG,GAAG;MACXI,CAAC,EAAEnB,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;MACvBS,CAAC,EAAEpB,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;MACvBU,CAAC,EAAErB,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG;KACvB;IAEDE,MAAM,CAACC,GAAG,GAAGN,OAAO,CAACK,MAAM,CAACE,GAAG,CAAC;IAChCF,MAAM,CAACG,GAAG,GAAGP,OAAO,CAACI,MAAM,CAACE,GAAG,CAAC;GACjC,MAAM,IAAIlB,aAAa,CAACc,KAAK,CAAC,EAAE;IAC/B,IAAIf,KAAK,CAACe,KAAK,CAAC,EAAE;MAChBE,MAAM,CAACG,GAAG,GAAG;QACXM,CAAC,EAAEtB,KAAK,CAACW,KAAK,CAACW,CAAC,EAAE,GAAG,CAAC;QACtBC,CAAC,EAAEvB,KAAK,CAACW,KAAK,CAACY,CAAC,EAAE,GAAG,CAAC;QACtBC,CAAC,EAAExB,KAAK,CAACW,KAAK,CAACa,CAAC,EAAE,GAAG;OACtB;MACDX,MAAM,CAACE,GAAG,GAAGV,OAAO,CAACQ,MAAM,CAACG,GAAG,CAAC;KACjC,MAAM,IAAIlB,KAAK,CAACa,KAAK,CAAC,EAAE;MACvBE,MAAM,CAACE,GAAG,GAAG;QACXI,CAAC,EAAEnB,KAAK,CAACW,KAAK,CAACQ,CAAC,EAAE,GAAG,CAAC;QACtBC,CAAC,EAAEpB,KAAK,CAACW,KAAK,CAACS,CAAC,EAAE,GAAG,CAAC;QACtBC,CAAC,EAAErB,KAAK,CAACW,KAAK,CAACU,CAAC,EAAE,GAAG;OACtB;MACDR,MAAM,CAACG,GAAG,GAAGP,OAAO,CAACI,MAAM,CAACE,GAAG,CAAC;KACjC,MAAM;MACL,MAAM,IAAIU,KAAK,CAAC,eAAe,CAAC;;IAGlCZ,MAAM,CAACC,GAAG,GAAGV,OAAO,CAACS,MAAM,CAACG,GAAG,CAAC;GACjC,MAAM;IACL,MAAM,IAAIS,KAAK,CAACxB,QAAQ,CAACW,KAAK,CAAC;;EAGjC,OAAOC,MAAgB;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}