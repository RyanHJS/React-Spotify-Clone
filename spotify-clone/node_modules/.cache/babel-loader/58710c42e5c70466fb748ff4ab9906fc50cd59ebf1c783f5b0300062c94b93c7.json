{"ast":null,"code":"export const HSLKeys = ['h', 's', 'l'];\nexport const RGBKeys = ['r', 'g', 'b'];\n/**\n * Constrain value into the range\n */\nexport function constrain(input, amount, range, sign) {\n  invariant(arguments.length === 4, 'All parameters are required');\n  const [min, max] = range;\n  let value = expr(input + sign + amount);\n  if (value < min) {\n    value = min;\n  } else if (value > max) {\n    value = max;\n  }\n  return Math.abs(value);\n}\n/**\n * Constrain an angle\n */\nexport function constrainDegrees(input, amount) {\n  invariant(isNumber(input), 'input is required');\n  let value = input + amount;\n  if (value > 360) {\n    value %= 360;\n  }\n  if (value < 0) {\n    value += 360;\n  }\n  return Math.abs(value);\n}\n/**\n * Parse math string expressions\n */\nexport function expr(input) {\n  const chars = [...input];\n  const n = [];\n  const op = [];\n  let parsed;\n  let index = 0;\n  let last = true;\n  n[index] = '';\n  // Parse the string\n  for (const char of chars) {\n    if (Number.isNaN(parseInt(char, 10)) && char !== '.' && !last) {\n      op[index] = char;\n      index++;\n      n[index] = '';\n      last = true;\n    } else {\n      n[index] += char;\n      last = false;\n    }\n  }\n  // Calculate the expression\n  parsed = parseFloat(n[0]);\n  for (const [o, element] of op.entries()) {\n    const value = parseFloat(n[o + 1]);\n    switch (element) {\n      case '+':\n        parsed += value;\n        break;\n      case '-':\n        parsed -= value;\n        break;\n      case '*':\n        parsed *= value;\n        break;\n      case '/':\n        parsed /= value;\n        break;\n      default:\n        break;\n    }\n  }\n  return parsed;\n}\nexport function invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    if (message === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n  let error;\n  if (!message) {\n    throw new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n  } else {\n    error = new Error(message);\n  }\n  error.name = 'colorizr';\n  throw error;\n}\n/**\n * Check if an object contains HSL values\n */\nexport function isHSL(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(_ref => {\n    let [key, value] = _ref;\n    return HSLKeys.includes(key) && value >= 0 && value <= (key === 'h' ? 360 : 100);\n  });\n}\n/**\n * Check if the input is a number and not NaN\n */\nexport function isNumber(input) {\n  return typeof input === 'number' && !Number.isNaN(input);\n}\n/**\n * Check if the input is an object\n */\nexport function isPlainObject(input) {\n  if (!input) {\n    return false;\n  }\n  const {\n    toString\n  } = Object.prototype;\n  const prototype = Object.getPrototypeOf(input);\n  return toString.call(input) === '[object Object]' && (prototype === null || prototype === Object.getPrototypeOf({}));\n}\n/**\n * Check if an object contains RGB values.\n */\nexport function isRGB(input) {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n  const entries = Object.entries(input);\n  return !!entries.length && entries.every(_ref2 => {\n    let [key, value] = _ref2;\n    return RGBKeys.includes(key) && value >= 0 && value <= 255;\n  });\n}\n/**\n * Check if an array contains RGB values.\n */\nexport function isRGBArray(input) {\n  return Array.isArray(input) && input.length === 3 && input.every(d => d >= 0 && d <= 255);\n}\n/**\n * Check if the input is a string\n */\nexport function isString(input) {\n  return typeof input === 'string';\n}\n/**\n * Limit values per type.\n */\nexport function limit(input, type) {\n  invariant(isNumber(input), 'Input is not a number');\n  /* istanbul ignore else */\n  if (RGBKeys.includes(type)) {\n    return Math.max(Math.min(input, 255), 0);\n  }\n  if (['s', 'l'].includes(type)) {\n    return Math.max(Math.min(input, 100), 0);\n  }\n  if (type === 'h') {\n    return Math.max(Math.min(input, 360), 0);\n  }\n  throw new Error('Invalid type');\n}\nexport const messages = {\n  amount: 'amount must be a number',\n  left: 'left is required and must be a string',\n  right: 'right is required and must be a string',\n  input: 'input is required',\n  inputString: 'input is required and must be a string',\n  invalid: 'invalid input',\n  options: 'invalid options'\n};\n/**\n * Creates an object composed of the picked source properties.\n */\nexport function pick(input, options) {\n  if (!Array.isArray(options)) {\n    throw new TypeError('options must be an array');\n  }\n  return options.filter(d => typeof input[d] !== 'undefined').reduce((acc, d) => {\n    acc[d] = input[d];\n    return acc;\n  }, {});\n}\n/**\n * Round decimal numbers.\n */\nexport function round(input) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  const factor = 10 ** digits;\n  return Math.round(input * factor) / factor;\n}","map":{"version":3,"names":["HSLKeys","RGBKeys","constrain","input","amount","range","sign","invariant","arguments","length","min","max","value","expr","Math","abs","constrainDegrees","isNumber","chars","n","op","parsed","index","last","char","Number","isNaN","parseInt","parseFloat","o","element","entries","condition","message","process","env","NODE_ENV","undefined","Error","error","name","isHSL","isPlainObject","Object","every","_ref","key","includes","toString","prototype","getPrototypeOf","call","isRGB","_ref2","isRGBArray","Array","isArray","d","isString","limit","type","messages","left","right","inputString","invalid","options","pick","TypeError","filter","reduce","acc","round","digits","factor"],"sources":["/Users/ryanhe/Desktop/Javascript/React-Spotify-Clone/spotify-clone/node_modules/colorizr/src/modules/utils.ts"],"sourcesContent":["import { HSL, PlainObject, RGB, RGBArray } from '../types';\n\nexport const HSLKeys = ['h', 's', 'l'];\nexport const RGBKeys = ['r', 'g', 'b'];\n\n/**\n * Constrain value into the range\n */\nexport function constrain(input: number, amount: number, range: number[], sign: string): number {\n  invariant(arguments.length === 4, 'All parameters are required');\n\n  const [min, max] = range;\n  let value = expr(input + sign + amount);\n\n  if (value < min) {\n    value = min;\n  } else if (value > max) {\n    value = max;\n  }\n\n  return Math.abs(value);\n}\n\n/**\n * Constrain an angle\n */\nexport function constrainDegrees(input: number, amount: number): number {\n  invariant(isNumber(input), 'input is required');\n\n  let value = input + amount;\n\n  if (value > 360) {\n    value %= 360;\n  }\n\n  if (value < 0) {\n    value += 360;\n  }\n\n  return Math.abs(value);\n}\n\n/**\n * Parse math string expressions\n */\nexport function expr(input: string): number {\n  const chars = [...input];\n  const n: string[] = [];\n  const op: string[] = [];\n\n  let parsed;\n  let index = 0;\n  let last = true;\n\n  n[index] = '';\n\n  // Parse the string\n  for (const char of chars) {\n    if (Number.isNaN(parseInt(char, 10)) && char !== '.' && !last) {\n      op[index] = char;\n      index++;\n      n[index] = '';\n      last = true;\n    } else {\n      n[index] += char;\n      last = false;\n    }\n  }\n\n  // Calculate the expression\n  parsed = parseFloat(n[0]);\n\n  for (const [o, element] of op.entries()) {\n    const value = parseFloat(n[o + 1]);\n\n    switch (element) {\n      case '+':\n        parsed += value;\n        break;\n      case '-':\n        parsed -= value;\n        break;\n      case '*':\n        parsed *= value;\n        break;\n      case '/':\n        parsed /= value;\n        break;\n      default:\n        break;\n    }\n  }\n\n  return parsed;\n}\n\nexport function invariant(condition: boolean, message: string): asserts condition {\n  if (condition) {\n    return;\n  }\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    if (message === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  let error;\n\n  if (!message) {\n    throw new Error(\n      'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.',\n    );\n  } else {\n    error = new Error(message);\n  }\n\n  error.name = 'colorizr';\n\n  throw error;\n}\n\n/**\n * Check if an object contains HSL values\n */\nexport function isHSL(input: any): input is HSL {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n\n  const entries = Object.entries(input);\n\n  return (\n    !!entries.length &&\n    entries.every(\n      ([key, value]) => HSLKeys.includes(key) && value >= 0 && value <= (key === 'h' ? 360 : 100),\n    )\n  );\n}\n\n/**\n * Check if the input is a number and not NaN\n */\nexport function isNumber(input: any): input is number {\n  return typeof input === 'number' && !Number.isNaN(input);\n}\n\n/**\n * Check if the input is an object\n */\nexport function isPlainObject(input: any): input is PlainObject {\n  if (!input) {\n    return false;\n  }\n\n  const { toString } = Object.prototype;\n  const prototype = Object.getPrototypeOf(input);\n\n  return (\n    toString.call(input) === '[object Object]' &&\n    (prototype === null || prototype === Object.getPrototypeOf({}))\n  );\n}\n\n/**\n * Check if an object contains RGB values.\n */\nexport function isRGB(input: any): input is RGB {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n\n  const entries = Object.entries(input);\n\n  return (\n    !!entries.length &&\n    entries.every(([key, value]) => RGBKeys.includes(key) && value >= 0 && value <= 255)\n  );\n}\n\n/**\n * Check if an array contains RGB values.\n */\nexport function isRGBArray(input: any): input is RGBArray {\n  return Array.isArray(input) && input.length === 3 && input.every(d => d >= 0 && d <= 255);\n}\n\n/**\n * Check if the input is a string\n */\nexport function isString(input: any): input is string {\n  return typeof input === 'string';\n}\n\n/**\n * Limit values per type.\n */\nexport function limit(input: number, type: string): number {\n  invariant(isNumber(input), 'Input is not a number');\n\n  /* istanbul ignore else */\n  if (RGBKeys.includes(type)) {\n    return Math.max(Math.min(input, 255), 0);\n  }\n\n  if (['s', 'l'].includes(type)) {\n    return Math.max(Math.min(input, 100), 0);\n  }\n\n  if (type === 'h') {\n    return Math.max(Math.min(input, 360), 0);\n  }\n\n  throw new Error('Invalid type');\n}\n\nexport const messages = {\n  amount: 'amount must be a number',\n  left: 'left is required and must be a string',\n  right: 'right is required and must be a string',\n  input: 'input is required',\n  inputString: 'input is required and must be a string',\n  invalid: 'invalid input',\n  options: 'invalid options',\n};\n\n/**\n * Creates an object composed of the picked source properties.\n */\nexport function pick(input: PlainObject, options: string[]): PlainObject {\n  if (!Array.isArray(options)) {\n    throw new TypeError('options must be an array');\n  }\n\n  return options\n    .filter(d => typeof input[d] !== 'undefined')\n    .reduce((acc: PlainObject, d) => {\n      acc[d] = input[d];\n\n      return acc;\n    }, {});\n}\n\n/**\n * Round decimal numbers.\n */\nexport function round(input: number, digits = 2): number {\n  const factor = 10 ** digits;\n\n  return Math.round(input * factor) / factor;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}