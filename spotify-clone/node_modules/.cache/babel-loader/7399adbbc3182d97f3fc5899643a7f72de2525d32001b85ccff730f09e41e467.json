{"ast":null,"code":"\"use strict\";\n\n/**\n * Module dependencies.\n */\nvar utils = require('./utils');\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key)) obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n  // content-type\n  var ct = header['content-type'] || '';\n  this.type = utils.type(ct); // params\n\n  var params = utils.params(ct);\n  for (var key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key)) this[key] = params[key];\n  }\n  this.links = {}; // links\n\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (_unused) {// ignore\n  }\n};\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  var type = status / 100 | 0; // status / class\n\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type; // basics\n\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false; // sugar\n\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};","map":{"version":3,"names":["utils","require","module","exports","ResponseBase","obj","mixin","key","prototype","Object","hasOwnProperty","call","get","field","header","toLowerCase","_setHeaderProperties","ct","type","params","links","link","parseLinks","_unused","_setStatusProperties","status","statusCode","statusType","info","ok","redirect","clientError","serverError","error","toError","created","accepted","noContent","badRequest","unauthorized","notAcceptable","forbidden","notFound","unprocessableEntity"],"sources":["/Users/ryanhe/Desktop/Javascript/React-Spotify-Clone/spotify-clone/node_modules/superagent/src/response-base.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nconst utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (const key in ResponseBase.prototype) {\n    if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key))\n      obj[key] = ResponseBase.prototype[key];\n  }\n\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n\n  // content-type\n  const ct = header['content-type'] || '';\n  this.type = utils.type(ct);\n\n  // params\n  const params = utils.params(ct);\n  for (const key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key))\n      this[key] = params[key];\n  }\n\n  this.links = {};\n\n  // links\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch {\n    // ignore\n  }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  const type = (status / 100) | 0;\n\n  // status / class\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type;\n\n  // basics\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false;\n\n  // sugar\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}