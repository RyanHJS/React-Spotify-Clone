{"ast":null,"code":"'use strict';\n\nvar AuthenticationRequest = require('./authentication-request'),\n  WebApiRequest = require('./webapi-request'),\n  HttpManager = require('./http-manager');\nfunction SpotifyWebApi(credentials) {\n  this._credentials = credentials || {};\n}\nSpotifyWebApi.prototype = {\n  setCredentials: function (credentials) {\n    for (var key in credentials) {\n      if (credentials.hasOwnProperty(key)) {\n        this._credentials[key] = credentials[key];\n      }\n    }\n  },\n  getCredentials: function () {\n    return this._credentials;\n  },\n  resetCredentials: function () {\n    this._credentials = null;\n  },\n  setClientId: function (clientId) {\n    this._setCredential('clientId', clientId);\n  },\n  setClientSecret: function (clientSecret) {\n    this._setCredential('clientSecret', clientSecret);\n  },\n  setAccessToken: function (accessToken) {\n    this._setCredential('accessToken', accessToken);\n  },\n  setRefreshToken: function (refreshToken) {\n    this._setCredential('refreshToken', refreshToken);\n  },\n  setRedirectURI: function (redirectUri) {\n    this._setCredential('redirectUri', redirectUri);\n  },\n  getRedirectURI: function () {\n    return this._getCredential('redirectUri');\n  },\n  getClientId: function () {\n    return this._getCredential('clientId');\n  },\n  getClientSecret: function () {\n    return this._getCredential('clientSecret');\n  },\n  getAccessToken: function () {\n    return this._getCredential('accessToken');\n  },\n  getRefreshToken: function () {\n    return this._getCredential('refreshToken');\n  },\n  resetClientId: function () {\n    this._resetCredential('clientId');\n  },\n  resetClientSecret: function () {\n    this._resetCredential('clientSecret');\n  },\n  resetAccessToken: function () {\n    this._resetCredential('accessToken');\n  },\n  resetRefreshToken: function () {\n    this._resetCredential('refreshToken');\n  },\n  resetRedirectURI: function () {\n    this._resetCredential('redirectUri');\n  },\n  _setCredential: function (credentialKey, value) {\n    this._credentials = this._credentials || {};\n    this._credentials[credentialKey] = value;\n  },\n  _getCredential: function (credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      return this._credentials[credentialKey];\n    }\n  },\n  _resetCredential: function (credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      this._credentials[credentialKey] = null;\n    }\n  },\n  /**\n   * Look up a track.\n   * @param {string} trackId The track's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getTrack('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the track. Not returned if a callback is given.\n   */\n  getTrack: function (trackId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/tracks/' + trackId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Look up several tracks.\n   * @param {string[]} trackIds The IDs of the artists.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getTracks: function (trackIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/tracks').withQueryParameters({\n      ids: trackIds.join(',')\n    }, options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Look up an album.\n   * @param {string} albumId The album's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the album. Not returned if a callback is given.\n   */\n  getAlbum: function (albumId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/albums/' + albumId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Look up several albums.\n   * @param {string[]} albumIds The IDs of the albums.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbums(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the albums. Not returned if a callback is given.\n   */\n  getAlbums: function (albumIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/albums').withQueryParameters({\n      ids: albumIds.join(',')\n    }, options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Look up an artist.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example api.getArtist('1u7kkVrr14iBvrpYnZILJR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artist. Not returned if a callback is given.\n   */\n  getArtist: function (artistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/artists/' + artistId).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Look up several artists.\n   * @param {string[]} artistIds The IDs of the artists.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getArtists: function (artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/artists').withQueryParameters({\n      ids: artistIds.join(',')\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Search for music entities of certain types.\n   * @param {string} query The search query.\n   * @param {string[]} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', 'track', 'show', and 'episode'.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example search('Abba', ['track', 'playlist'], { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  search: function (query, types, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/search/').withQueryParameters({\n      type: types.join(','),\n      q: query\n    }, options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Search for an album.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchAlbums('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchAlbums: function (query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  },\n  /**\n   * Search for an artist.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchArtists('David Bowie', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchArtists: function (query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  },\n  /**\n   * Search for a track.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchTracks('Mr. Brightside', { limit : 3, offset : 2 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchTracks: function (query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  },\n  /**\n   * Search for playlists.\n   * @param {string} query The search query.\n   * @param {Object} options The possible options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchPlaylists('workout', { limit : 1, offset : 0 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchPlaylists: function (query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  },\n  /**\n   * Get an artist's albums.\n   * @param {string} artistId The artist's ID.\n   * @options {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistAlbums('0oSGxfWSnnOXhD2fKuz2Gy', { album_type : 'album', country : 'GB', limit : 2, offset : 5 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the albums\n   *          for the given artist. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistAlbums: function (artistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/artists/' + artistId + '/albums').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get the tracks of an album.\n   * @param albumId the album's ID.\n   * @options {Object} [options] The possible options, e.g. limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    tracks in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */\n  getAlbumTracks: function (albumId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/albums/' + albumId + '/tracks').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get an artist's top tracks.\n   * @param {string} artistId The artist's ID.\n   * @param {string} country The country/territory where the tracks are most popular. (format: ISO 3166-1 alpha-2)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          artist's top tracks in the given country. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistTopTracks: function (artistId, country, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/artists/' + artistId + '/top-tracks').withQueryParameters({\n      country: country\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get related artists.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistRelatedArtists('0oSGxfWSnnOXhD2fKuz2Gy').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getArtistRelatedArtists: function (artistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/artists/' + artistId + '/related-artists').build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get information about a user.\n   * @param userId The user ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUser('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUser: function (userId, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/users/' + encodeURIComponent(userId)).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get information about the user that has signed in (the current user).\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getMe().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. The amount of information\n   *          depends on the permissions given by the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getMe: function (callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me').build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get a user's playlists.\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUserPlaylists('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of playlists. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUserPlaylists: function (userId, options, callback) {\n    var path;\n    if (typeof userId === 'string') {\n      path = '/v1/users/' + encodeURIComponent(userId) + '/playlists';\n    } else if (typeof userId === 'object') {\n      callback = options;\n      options = userId;\n      path = '/v1/me/playlists';\n    } /* undefined */else {\n      path = '/v1/me/playlists';\n    }\n    return WebApiRequest.builder(this.getAccessToken()).withPath(path).withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylist('3EsfV6XzCHU8SPNdbnFogK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylist: function (playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get tracks in a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] Optional options, such as fields.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylistTracks('3ktAYNcRHpazJ9qecm3ptn').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object that containing\n   * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylistTracks: function (playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/tracks').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Create a playlist.\n   * @param {string} [name] The name of the playlist.\n   * @param {Object} [options] The possible options, being description, collaborative and public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example createPlaylist('My playlist', {''description': 'My description', 'collaborative' : false, 'public': true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing information about the\n   *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  createPlaylist: function (name, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/playlists').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      name: name\n    }, options).build().execute(HttpManager.post, callback);\n  },\n  /**\n   * Follow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  followPlaylist: function (playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/followers').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters(options).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Unfollow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  unfollowPlaylist: function (playlistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/followers').build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Change playlist details.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, e.g. name, public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example changePlaylistDetails('3EsfV6XzCHU8SPNdbnFogK', {name: 'New name', public: true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  changePlaylistDetails: function (playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId).withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters(options).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Replace the image used to represent a specific playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string} base64URI Base64 encoded JPEG image data, maximum payload size is 256 KB\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example uploadCustomPlaylistCoverImage('3EsfV6XzCHU8SPNdbnFogK', 'longbase64uri').then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  uploadCustomPlaylistCoverImage: function (playlistId, base64URI, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/images').withHeaders({\n      'Content-Type': 'image/jpeg'\n    }).withBodyParameters(base64URI).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Add tracks to a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string[]} tracks URIs of the tracks to add to the playlist.\n   * @param {Object} [options] Options, position being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example addTracksToPlaylist('3EsfV6XzCHU8SPNdbnFogK',\n              '[\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]').then(...)\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  addTracksToPlaylist: function (playlistId, tracks, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/tracks').withHeaders({\n      'Content-Type': 'application/json'\n    }).withQueryParameters(options).withBodyParameters({\n      uris: tracks\n    }).build().execute(HttpManager.post, callback);\n  },\n  /**\n   * Remove tracks from a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} tracks An array of objects containing a property called uri with the track URI (String), and\n   * an optional property called positions (int[]), e.g. { uri : \"spotify:track:491rM2JN8KvmV6p0oDDuJT\", positions : [0, 15] }\n   * @param {Object} options Options, snapshot_id being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylist: function (playlistId, tracks, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/tracks').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      tracks: tracks\n    }, options).build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Remove tracks from a playlist by position instead of specifying the tracks' URIs.\n   * @param {string} playlistId The playlist's ID\n   * @param {int[]} positions The positions of the tracks in the playlist that should be removed\n   * @param {string} snapshot_id The snapshot ID, or version, of the playlist. Required\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylistByPosition: function (playlistId, positions, snapshotId, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/tracks').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      positions: positions,\n      snapshot_id: snapshotId\n    }).build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Replace tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} uris An array of track URIs (strings)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  replaceTracksInPlaylist: function (playlistId, uris, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/tracks').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      uris: uris\n    }).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Reorder tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {int} rangeStart The position of the first track to be reordered.\n   * @param {int} insertBefore The position where the tracks should be inserted.\n   * @param {Object} options Optional parameters, i.e. range_length and snapshot_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  reorderTracksInPlaylist: function (playlistId, rangeStart, insertBefore, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/playlists/' + playlistId + '/tracks').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      range_start: rangeStart,\n      insert_before: insertBefore\n    }, options).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTrack: function (trackId, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/audio-features/' + trackId).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioAnalysisForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio analysis. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioAnalysisForTrack: function (trackId, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/audio-analysis/' + trackId).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get audio features for multiple tracks identified by their unique Spotify ID.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTracks(['38P3Q4QcdjQALGF2Z92BmR', '2HO2bnoMrpnZUbUqiilLHi']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features for the tracks. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTracks: function (trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/audio-features').withQueryParameters({\n      ids: trackIds.join(',')\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getRecommendations({ min_energy: 0.4, seed_artists: ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'], min_popularity: 50 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getRecommendations: function (options, callback) {\n    var _opts = {};\n    var optionsOfTypeArray = ['seed_artists', 'seed_genres', 'seed_tracks'];\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        if (optionsOfTypeArray.indexOf(option) !== -1 && Object.prototype.toString.call(options[option]) === '[object Array]') {\n          _opts[option] = options[option].join(',');\n        } else {\n          _opts[option] = options[option];\n        }\n      }\n    }\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/recommendations').withQueryParameters(_opts).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAvailableGenreSeeds().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of available genres to be used as seeds for recommendations.\n   *          If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAvailableGenreSeeds: function (callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/recommendations/available-genre-seeds').build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Retrieve the tracks that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist track objects. Not returned if a callback is given.\n   */\n  getMySavedTracks: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/tracks').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the track ID in the request.\n   * The boolean value of true indicates that the track is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedTracks: function (trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/tracks/contains').withQueryParameters({\n      ids: trackIds.join(',')\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Remove a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedTracks: function (trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/tracks').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      ids: trackIds\n    }).build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Add a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedTracks: function (trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/tracks').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      ids: trackIds\n    }).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Remove an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedAlbums: function (albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/albums').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters(albumIds).build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Add an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedAlbums: function (albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/albums').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters(albumIds).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Retrieve the albums that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist album objects. Not returned if a callback is given.\n   */\n  getMySavedAlbums: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/albums').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the album ID in the request.\n   * The boolean value of true indicates that the album is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedAlbums: function (albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/albums/contains').withQueryParameters({\n      ids: albumIds.join(',')\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get the current user's top artists based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of artists,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopArtists: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/top/artists').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get the current user's top tracks based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopTracks: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/top/tracks').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get the Current User's Recently Played Tracks\n   * @param {Object} [options] Options, being type, after, limit, before.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of play history objects,\n   *          otherwise an error. Not returned if a callback is given. Note that the response will be empty\n   *          in case the user has enabled private session.\n   */\n  getMyRecentlyPlayedTracks: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/recently-played').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Add track or episode to device queue\n   * @param {string} [uri] uri of the track or episode to add\n   * @param {Object} [options] Options, being device_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  addToQueue: function (uri, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/queue').withQueryParameters({\n      uri: uri\n    }, options).build().execute(HttpManager.post, callback);\n  },\n  /** \n   * Get the Current User's Available Devices\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of device objects,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyDevices: function (callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/devices').build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get the Current User's Currently Playing Track.\n   * @param {Object} [options] Options, being market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyCurrentPlayingTrack: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/currently-playing').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get Information About The User's Current Playback State\n   * @param {Object} [options] Options, being market and additional_types.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyCurrentPlaybackState: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Transfer a User's Playback\n   * @param {string[]} [deviceIds] An _array_ containing a device ID on which playback should be started/transferred. \n   * (NOTE: The API is currently only supporting a single device ID.)\n   * @param {Object} [options] Options, the only one being 'play'.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  transferMyPlayback: function (deviceIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters({\n      device_ids: deviceIds\n    }, options).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Starts o Resumes the Current User's Playback\n   * @param {Object} [options] Options, being device_id, context_uri, offset, uris, position_ms.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example play({context_uri: 'spotify:album:5ht7ItJgpBH7W6vJ5BqpPr'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  play: function (options, callback) {\n    /*jshint camelcase: false */\n    var _options = options || {};\n    var queryParams = _options.device_id ? {\n      device_id: _options.device_id\n    } : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function (field) {\n      if (field in _options) {\n        postData[field] = _options[field];\n      }\n    });\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/play').withQueryParameters(queryParams).withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters(postData).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Pauses the Current User's Playback\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example pause().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  pause: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/pause')\n    /*jshint camelcase: false */.withQueryParameters(options && options.device_id ? {\n      device_id: options.device_id\n    } : null).withHeaders({\n      'Content-Type': 'application/json'\n    }).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Skip the Current User's Playback To Previous Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToPrevious().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  skipToPrevious: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/previous').withQueryParameters(options && options.device_id ? {\n      device_id: options.device_id\n    } : null).build().execute(HttpManager.post, callback);\n  },\n  /**\n   * Skip the Current User's Playback To Next Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToNext().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  skipToNext: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/next').withQueryParameters(options && options.device_id ? {\n      device_id: options.device_id\n    } : null).build().execute(HttpManager.post, callback);\n  },\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   *\n   * @param {number} positionMs The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  seek: function (positionMs, options, callback) {\n    var params = {\n      /* jshint camelcase: false */\n      position_ms: positionMs\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/seek').withQueryParameters(params).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Set Repeat Mode On The Current User's Playback\n   * @param {string} [state] State (track, context, or off)\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setRepeat('context', {}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  setRepeat: function (state, options, callback) {\n    var params = {\n      state: state\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/repeat').withQueryParameters(params).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Set Shuffle Mode On The Current User's Playback\n   * @param {boolean} [state] State \n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setShuffle({state: 'false'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  setShuffle: function (state, options, callback) {\n    var params = {\n      state: state\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/shuffle').withQueryParameters(params).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Set the volume for the user’s current playback device.\n   * @param {number} volumePercent The volume to set. Must be a value from 0 to 100.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  setVolume: function (volumePercent, options, callback) {\n    var params = {\n      /* jshint camelcase: false */\n      volume_percent: volumePercent\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/player/volume').withQueryParameters(params).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Add the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followUsers: function (userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/following').withQueryParameters({\n      ids: userIds.join(','),\n      type: 'user'\n    }).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Add the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followArtists: function (artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/following').withQueryParameters({\n      ids: artistIds.join(','),\n      type: 'artist'\n    }).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Remove the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowUsers: function (userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/following').withQueryParameters({\n      ids: userIds.join(','),\n      type: 'user'\n    }).build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Remove the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowArtists: function (artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/following').withQueryParameters({\n      ids: artistIds.join(','),\n      type: 'artist'\n    }).build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Check to see if the current user is following one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the users IDs in the request.\n   *          The boolean value of true indicates that the user is following that user, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingUsers: function (userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/following/contains').withQueryParameters({\n      ids: userIds.join(','),\n      type: 'user'\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get the current user's followed artists.\n   * @param {Object} [options] Options, being after and limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getFollowedArtists: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/following').withQueryParameters({\n      type: 'artist'\n    }, options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Check if users are following a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {String[]} User IDs of the following users\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an array of booleans. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  areFollowingPlaylist: function (userId, playlistId, followerIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/followers/contains').withQueryParameters({\n      ids: followerIds.join(',')\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Check to see if the current user is following one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the artists IDs in the request.\n   *          The boolean value of true indicates that the user is following that artist, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingArtists: function (artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/following/contains').withQueryParameters({\n      ids: artistIds.join(','),\n      type: 'artist'\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Retrieve new releases\n   * @param {Object} [options] Options, being country, limit and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getNewReleases: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/browse/new-releases').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Retrieve featured playlists\n   * @param {Object} [options] Options, being country, locale, timestamp, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * featured playlists. Not returned if a callback is given.\n   */\n  getFeaturedPlaylists: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/browse/featured-playlists').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)\n   * @param {Object} [options] Options, being country, locale, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object of categories.\n   * Not returned if a callback is given.\n   */\n  getCategories: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/browse/categories').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Retrieve a category.\n   * @param {string} categoryId The id of the category to retrieve.\n   * @param {Object} [options] Options, being country, locale.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a category object.\n   * Not returned if a callback is given.\n   */\n  getCategory: function (categoryId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/browse/categories/' + categoryId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Retrieve playlists for a category.\n   * @param {string} categoryId The id of the category to retrieve playlists for.\n   * @param {Object} [options] Options, being country, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to a paging object containing simple playlists.\n   * Not returned if a callback is given.\n   */\n  getPlaylistsForCategory: function (categoryId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/browse/categories/' + categoryId + '/playlists').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get a show.\n   * @param {string} showId The show's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShow('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the show. Not returned if a callback is given.\n   */\n  getShow: function (showId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/shows/' + showId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Look up several shows.\n   * @param {string[]} showIds The IDs of the shows.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShows(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the shows. Not returned if a callback is given.\n   */\n  getShows: function (showIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/shows').withQueryParameters({\n      ids: showIds.join(',')\n    }, options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Check if one or more shows is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the show ID in the request.\n   * The boolean value of true indicates that the show is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedShows: function (showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/shows/contains').withQueryParameters({\n      ids: showIds.join(',')\n    }).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Remove an show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedShows: function (showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/shows').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters(showIds).build().execute(HttpManager.del, callback);\n  },\n  /**\n   * Add a show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedShows: function (showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/shows').withHeaders({\n      'Content-Type': 'application/json'\n    }).withBodyParameters(showIds).build().execute(HttpManager.put, callback);\n  },\n  /**\n   * Retrieve the shows that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist show objects. Not returned if a callback is given.\n   */\n  getMySavedShows: function (options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/me/shows').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Get the episodes of an show.\n   * @param showId the show's ID.\n   * @options {Object} [options] The possible options, being limit, offset, and market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShowEpisodes('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    episodes in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */\n  getShowEpisodes: function (showId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/shows/' + showId + '/episodes').withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Search for a show.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchShows('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchShows: function (query, options, callback) {\n    return this.search(query, ['show'], options, callback);\n  },\n  /**\n   * Search for an episode.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchEpisodes('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchEpisodes: function (query, options, callback) {\n    return this.search(query, ['episode'], options, callback);\n  },\n  /**\n    * Look up an episode.\n    * @param {string} episodeId The episode's ID.\n    * @param {Object} [options] The possible options, currently only market.\n    * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n    * @example getEpisode('3Qm86XLflmIXVm1wcwkgDK').then(...)\n    * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n    *          about the episode. Not returned if a callback is given.\n    */\n  getEpisode: function (episodeId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/episodes/' + episodeId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n  },\n  /**\n   * Look up several episodes.\n   * @param {string[]} episodeIds The IDs of the episodes.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisodes(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episodes. Not returned if a callback is given.\n   */\n  getEpisodes: function (episodeIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken()).withPath('/v1/episodes').withQueryParameters({\n      ids: episodeIds.join(',')\n    }, options).build().execute(HttpManager.get, callback);\n  }\n};\nSpotifyWebApi._addMethods = function (methods) {\n  for (var i in methods) {\n    if (methods.hasOwnProperty(i)) {\n      this.prototype[i] = methods[i];\n    }\n  }\n};\nmodule.exports = SpotifyWebApi;","map":{"version":3,"names":["AuthenticationRequest","require","WebApiRequest","HttpManager","SpotifyWebApi","credentials","_credentials","prototype","setCredentials","key","hasOwnProperty","getCredentials","resetCredentials","setClientId","clientId","_setCredential","setClientSecret","clientSecret","setAccessToken","accessToken","setRefreshToken","refreshToken","setRedirectURI","redirectUri","getRedirectURI","_getCredential","getClientId","getClientSecret","getAccessToken","getRefreshToken","resetClientId","_resetCredential","resetClientSecret","resetAccessToken","resetRefreshToken","resetRedirectURI","credentialKey","value","getTrack","trackId","options","callback","builder","withPath","withQueryParameters","build","execute","get","getTracks","trackIds","ids","join","getAlbum","albumId","getAlbums","albumIds","getArtist","artistId","getArtists","artistIds","search","query","types","type","q","searchAlbums","searchArtists","searchTracks","searchPlaylists","getArtistAlbums","getAlbumTracks","getArtistTopTracks","country","getArtistRelatedArtists","getUser","userId","encodeURIComponent","getMe","getUserPlaylists","path","getPlaylist","playlistId","getPlaylistTracks","createPlaylist","name","withHeaders","withBodyParameters","post","followPlaylist","put","unfollowPlaylist","del","changePlaylistDetails","uploadCustomPlaylistCoverImage","base64URI","addTracksToPlaylist","tracks","uris","removeTracksFromPlaylist","removeTracksFromPlaylistByPosition","positions","snapshotId","snapshot_id","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","getAudioFeaturesForTrack","getAudioAnalysisForTrack","getAudioFeaturesForTracks","getRecommendations","_opts","optionsOfTypeArray","option","indexOf","Object","toString","call","getAvailableGenreSeeds","getMySavedTracks","containsMySavedTracks","removeFromMySavedTracks","addToMySavedTracks","removeFromMySavedAlbums","addToMySavedAlbums","getMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","addToQueue","uri","getMyDevices","getMyCurrentPlayingTrack","getMyCurrentPlaybackState","transferMyPlayback","deviceIds","device_ids","play","_options","queryParams","device_id","postData","forEach","field","pause","skipToPrevious","skipToNext","seek","positionMs","params","position_ms","setRepeat","state","setShuffle","setVolume","volumePercent","volume_percent","followUsers","userIds","followArtists","unfollowUsers","unfollowArtists","isFollowingUsers","getFollowedArtists","areFollowingPlaylist","followerIds","isFollowingArtists","getNewReleases","getFeaturedPlaylists","getCategories","getCategory","categoryId","getPlaylistsForCategory","getShow","showId","getShows","showIds","containsMySavedShows","removeFromMySavedShows","addToMySavedShows","getMySavedShows","getShowEpisodes","searchShows","searchEpisodes","getEpisode","episodeId","getEpisodes","episodeIds","_addMethods","methods","i","module","exports"],"sources":["/Users/ryanhe/Desktop/Javascript/React-Spotify-Clone/spotify-clone/node_modules/spotify-web-api-node/src/spotify-web-api.js"],"sourcesContent":["'use strict';\n\nvar AuthenticationRequest = require('./authentication-request'),\n  WebApiRequest = require('./webapi-request'),\n  HttpManager = require('./http-manager');\n\nfunction SpotifyWebApi(credentials) {\n  this._credentials = credentials || {};\n}\n\nSpotifyWebApi.prototype = {\n  setCredentials: function(credentials) {\n    for (var key in credentials) {\n      if (credentials.hasOwnProperty(key)) {\n        this._credentials[key] = credentials[key];\n      }\n    }\n  },\n\n  getCredentials: function() {\n    return this._credentials;\n  },\n\n  resetCredentials: function() {\n    this._credentials = null;\n  },\n\n  setClientId: function(clientId) {\n    this._setCredential('clientId', clientId);\n  },\n\n  setClientSecret: function(clientSecret) {\n    this._setCredential('clientSecret', clientSecret);\n  },\n\n  setAccessToken: function(accessToken) {\n    this._setCredential('accessToken', accessToken);\n  },\n\n  setRefreshToken: function(refreshToken) {\n    this._setCredential('refreshToken', refreshToken);\n  },\n\n  setRedirectURI: function(redirectUri) {\n    this._setCredential('redirectUri', redirectUri);\n  },\n\n  getRedirectURI: function() {\n    return this._getCredential('redirectUri');\n  },\n\n  getClientId: function() {\n    return this._getCredential('clientId');\n  },\n\n  getClientSecret: function() {\n    return this._getCredential('clientSecret');\n  },\n\n  getAccessToken: function() {\n    return this._getCredential('accessToken');\n  },\n\n  getRefreshToken: function() {\n    return this._getCredential('refreshToken');\n  },\n\n  resetClientId: function() {\n    this._resetCredential('clientId');\n  },\n\n  resetClientSecret: function() {\n    this._resetCredential('clientSecret');\n  },\n\n  resetAccessToken: function() {\n    this._resetCredential('accessToken');\n  },\n\n  resetRefreshToken: function() {\n    this._resetCredential('refreshToken');\n  },\n\n  resetRedirectURI: function() {\n    this._resetCredential('redirectUri');\n  },\n\n  _setCredential: function(credentialKey, value) {\n    this._credentials = this._credentials || {};\n    this._credentials[credentialKey] = value;\n  },\n\n  _getCredential: function(credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      return this._credentials[credentialKey];\n    }\n  },\n\n  _resetCredential: function(credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      this._credentials[credentialKey] = null;\n    }\n  },\n\n  /**\n   * Look up a track.\n   * @param {string} trackId The track's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getTrack('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the track. Not returned if a callback is given.\n   */\n  getTrack: function(trackId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/tracks/' + trackId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several tracks.\n   * @param {string[]} trackIds The IDs of the artists.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getTracks: function(trackIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/tracks')\n      .withQueryParameters(\n        {\n          ids: trackIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up an album.\n   * @param {string} albumId The album's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the album. Not returned if a callback is given.\n   */\n  getAlbum: function(albumId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/albums/' + albumId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several albums.\n   * @param {string[]} albumIds The IDs of the albums.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbums(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the albums. Not returned if a callback is given.\n   */\n  getAlbums: function(albumIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/albums')\n      .withQueryParameters(\n        {\n          ids: albumIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up an artist.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example api.getArtist('1u7kkVrr14iBvrpYnZILJR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artist. Not returned if a callback is given.\n   */\n  getArtist: function(artistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several artists.\n   * @param {string[]} artistIds The IDs of the artists.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists')\n      .withQueryParameters({\n        ids: artistIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Search for music entities of certain types.\n   * @param {string} query The search query.\n   * @param {string[]} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', 'track', 'show', and 'episode'.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example search('Abba', ['track', 'playlist'], { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  search: function(query, types, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/search/')\n      .withQueryParameters(\n        {\n          type: types.join(','),\n          q: query\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Search for an album.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchAlbums('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchAlbums: function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  },\n\n  /**\n   * Search for an artist.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchArtists('David Bowie', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchArtists: function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  },\n\n  /**\n   * Search for a track.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchTracks('Mr. Brightside', { limit : 3, offset : 2 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchTracks: function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  },\n\n  /**\n   * Search for playlists.\n   * @param {string} query The search query.\n   * @param {Object} options The possible options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchPlaylists('workout', { limit : 1, offset : 0 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchPlaylists: function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  },\n\n  /**\n   * Get an artist's albums.\n   * @param {string} artistId The artist's ID.\n   * @options {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistAlbums('0oSGxfWSnnOXhD2fKuz2Gy', { album_type : 'album', country : 'GB', limit : 2, offset : 5 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the albums\n   *          for the given artist. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistAlbums: function(artistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId + '/albums')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the tracks of an album.\n   * @param albumId the album's ID.\n   * @options {Object} [options] The possible options, e.g. limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    tracks in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */\n  getAlbumTracks: function(albumId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/albums/' + albumId + '/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get an artist's top tracks.\n   * @param {string} artistId The artist's ID.\n   * @param {string} country The country/territory where the tracks are most popular. (format: ISO 3166-1 alpha-2)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          artist's top tracks in the given country. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistTopTracks: function(artistId, country, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId + '/top-tracks')\n      .withQueryParameters({\n        country: country\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get related artists.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistRelatedArtists('0oSGxfWSnnOXhD2fKuz2Gy').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getArtistRelatedArtists: function(artistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/artists/' + artistId + '/related-artists')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get information about a user.\n   * @param userId The user ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUser('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUser: function(userId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/users/' + encodeURIComponent(userId))\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get information about the user that has signed in (the current user).\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getMe().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. The amount of information\n   *          depends on the permissions given by the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getMe: function(callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get a user's playlists.\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUserPlaylists('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of playlists. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUserPlaylists: function(userId, options, callback) {\n    var path;\n    if (typeof userId === 'string') {\n      path = '/v1/users/' + encodeURIComponent(userId) + '/playlists';\n    } else if (typeof userId === 'object') {\n      callback = options;\n      options = userId;\n      path = '/v1/me/playlists';\n    } /* undefined */ else {\n      path = '/v1/me/playlists';\n    }\n\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath(path)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylist('3EsfV6XzCHU8SPNdbnFogK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylist: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get tracks in a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] Optional options, such as fields.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylistTracks('3ktAYNcRHpazJ9qecm3ptn').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object that containing\n   * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylistTracks: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Create a playlist.\n   * @param {string} [name] The name of the playlist.\n   * @param {Object} [options] The possible options, being description, collaborative and public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example createPlaylist('My playlist', {''description': 'My description', 'collaborative' : false, 'public': true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing information about the\n   *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  createPlaylist: function(name, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/playlists')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({\n        name : name,\n      }, options)\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Follow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  followPlaylist: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/followers')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(options)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Unfollow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  unfollowPlaylist: function(playlistId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/followers')\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Change playlist details.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, e.g. name, public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example changePlaylistDetails('3EsfV6XzCHU8SPNdbnFogK', {name: 'New name', public: true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  changePlaylistDetails: function(playlistId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId)\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(options)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Replace the image used to represent a specific playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string} base64URI Base64 encoded JPEG image data, maximum payload size is 256 KB\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example uploadCustomPlaylistCoverImage('3EsfV6XzCHU8SPNdbnFogK', 'longbase64uri').then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  uploadCustomPlaylistCoverImage: function(playlistId, base64URI, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/images')\n      .withHeaders({ 'Content-Type': 'image/jpeg' })\n      .withBodyParameters(base64URI)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Add tracks to a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string[]} tracks URIs of the tracks to add to the playlist.\n   * @param {Object} [options] Options, position being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example addTracksToPlaylist('3EsfV6XzCHU8SPNdbnFogK',\n              '[\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]').then(...)\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  addTracksToPlaylist: function(playlistId, tracks, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withQueryParameters(options)\n      .withBodyParameters({\n        uris: tracks\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Remove tracks from a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} tracks An array of objects containing a property called uri with the track URI (String), and\n   * an optional property called positions (int[]), e.g. { uri : \"spotify:track:491rM2JN8KvmV6p0oDDuJT\", positions : [0, 15] }\n   * @param {Object} options Options, snapshot_id being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylist: function(playlistId, tracks, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(\n        {\n          tracks: tracks\n        }, \n        options\n      )\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Remove tracks from a playlist by position instead of specifying the tracks' URIs.\n   * @param {string} playlistId The playlist's ID\n   * @param {int[]} positions The positions of the tracks in the playlist that should be removed\n   * @param {string} snapshot_id The snapshot ID, or version, of the playlist. Required\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylistByPosition: function(\n    playlistId,\n    positions,\n    snapshotId,\n    callback\n  ) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({\n        positions: positions,\n        snapshot_id: snapshotId\n      })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Replace tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} uris An array of track URIs (strings)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  replaceTracksInPlaylist: function(playlistId, uris, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({\n        uris: uris\n      })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Reorder tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {int} rangeStart The position of the first track to be reordered.\n   * @param {int} insertBefore The position where the tracks should be inserted.\n   * @param {Object} options Optional parameters, i.e. range_length and snapshot_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  reorderTracksInPlaylist: function(\n    playlistId,\n    rangeStart,\n    insertBefore,\n    options,\n    callback\n  ) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(\n        {\n          range_start: rangeStart,\n          insert_before: insertBefore\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTrack: function(trackId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/audio-features/' + trackId)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioAnalysisForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio analysis. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioAnalysisForTrack: function(trackId, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/audio-analysis/' + trackId)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get audio features for multiple tracks identified by their unique Spotify ID.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTracks(['38P3Q4QcdjQALGF2Z92BmR', '2HO2bnoMrpnZUbUqiilLHi']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features for the tracks. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/audio-features')\n      .withQueryParameters({\n        ids: trackIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getRecommendations({ min_energy: 0.4, seed_artists: ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'], min_popularity: 50 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getRecommendations: function(options, callback) {\n    var _opts = {};\n    var optionsOfTypeArray = ['seed_artists', 'seed_genres', 'seed_tracks'];\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        if (\n          optionsOfTypeArray.indexOf(option) !== -1 &&\n          Object.prototype.toString.call(options[option]) === '[object Array]'\n        ) {\n          _opts[option] = options[option].join(',');\n        } else {\n          _opts[option] = options[option];\n        }\n      }\n    }\n\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/recommendations')\n      .withQueryParameters(_opts)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAvailableGenreSeeds().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of available genres to be used as seeds for recommendations.\n   *          If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAvailableGenreSeeds: function(callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/recommendations/available-genre-seeds')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve the tracks that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist track objects. Not returned if a callback is given.\n   */\n  getMySavedTracks: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the track ID in the request.\n   * The boolean value of true indicates that the track is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks/contains')\n      .withQueryParameters({\n        ids: trackIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Remove a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({ ids: trackIds })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Add a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedTracks: function(trackIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters({ ids: trackIds })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Remove an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedAlbums: function(albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(albumIds)\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Add an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedAlbums: function(albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(albumIds)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Retrieve the albums that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist album objects. Not returned if a callback is given.\n   */\n  getMySavedAlbums: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the album ID in the request.\n   * The boolean value of true indicates that the album is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedAlbums: function(albumIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/albums/contains')\n      .withQueryParameters({\n        ids: albumIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the current user's top artists based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of artists,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopArtists: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/top/artists')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the current user's top tracks based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopTracks: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/top/tracks')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the Current User's Recently Played Tracks\n   * @param {Object} [options] Options, being type, after, limit, before.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of play history objects,\n   *          otherwise an error. Not returned if a callback is given. Note that the response will be empty\n   *          in case the user has enabled private session.\n   */\n  getMyRecentlyPlayedTracks: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/recently-played')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Add track or episode to device queue\n   * @param {string} [uri] uri of the track or episode to add\n   * @param {Object} [options] Options, being device_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  addToQueue: function(uri, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/queue')\n      .withQueryParameters(\n        {\n          uri: uri\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n\n  /** \n   * Get the Current User's Available Devices\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of device objects,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyDevices: function(callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/devices')\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the Current User's Currently Playing Track.\n   * @param {Object} [options] Options, being market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyCurrentPlayingTrack: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/currently-playing')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get Information About The User's Current Playback State\n   * @param {Object} [options] Options, being market and additional_types.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyCurrentPlaybackState: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Transfer a User's Playback\n   * @param {string[]} [deviceIds] An _array_ containing a device ID on which playback should be started/transferred. \n   * (NOTE: The API is currently only supporting a single device ID.)\n   * @param {Object} [options] Options, the only one being 'play'.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  transferMyPlayback: function(deviceIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(\n        {\n          device_ids: deviceIds,\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Starts o Resumes the Current User's Playback\n   * @param {Object} [options] Options, being device_id, context_uri, offset, uris, position_ms.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example play({context_uri: 'spotify:album:5ht7ItJgpBH7W6vJ5BqpPr'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  play: function(options, callback) {\n    /*jshint camelcase: false */\n    var _options = options || {};\n    var queryParams = _options.device_id\n      ? { device_id: _options.device_id }\n      : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function(field) {\n      if (field in _options) {\n        postData[field] = _options[field];\n      }\n    });\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/play')\n      .withQueryParameters(queryParams)\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(postData)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Pauses the Current User's Playback\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example pause().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  pause: function(options, callback) {\n    return (\n      WebApiRequest.builder(this.getAccessToken())\n        .withPath('/v1/me/player/pause')\n        /*jshint camelcase: false */\n        .withQueryParameters(\n          options && options.device_id ? { device_id: options.device_id } : null\n        )\n        .withHeaders({ 'Content-Type': 'application/json' })\n        .build()\n        .execute(HttpManager.put, callback)\n    );\n  },\n\n  /**\n   * Skip the Current User's Playback To Previous Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToPrevious().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  skipToPrevious: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/previous')\n      .withQueryParameters(\n        options && options.device_id ? { device_id: options.device_id } : null\n      )\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Skip the Current User's Playback To Next Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToNext().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  skipToNext: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/next')\n      .withQueryParameters(\n        options && options.device_id ? { device_id: options.device_id } : null\n      )\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   *\n   * @param {number} positionMs The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  seek: function(positionMs, options, callback) {\n    var params = {\n      /* jshint camelcase: false */\n      position_ms: positionMs\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/seek')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Set Repeat Mode On The Current User's Playback\n   * @param {string} [state] State (track, context, or off)\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setRepeat('context', {}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  setRepeat: function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/repeat')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Set Shuffle Mode On The Current User's Playback\n   * @param {boolean} [state] State \n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setShuffle({state: 'false'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  setShuffle: function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/shuffle')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * @param {number} volumePercent The volume to set. Must be a value from 0 to 100.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  setVolume: function(volumePercent, options, callback) {\n    var params = {\n      /* jshint camelcase: false */\n      volume_percent: volumePercent\n    };\n    if (options && 'device_id' in options) {\n      /* jshint camelcase: false */\n      params.device_id = options.device_id;\n    }\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/volume')\n      .withQueryParameters(params)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Add the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followUsers: function(userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Add the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Remove the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowUsers: function(userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Remove the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Check to see if the current user is following one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the users IDs in the request.\n   *          The boolean value of true indicates that the user is following that user, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingUsers: function(userIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following/contains')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the current user's followed artists.\n   * @param {Object} [options] Options, being after and limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getFollowedArtists: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following')\n      .withQueryParameters(\n        {\n          type: 'artist'\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if users are following a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {String[]} User IDs of the following users\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an array of booleans. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  areFollowingPlaylist: function(userId, playlistId, followerIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath(\n        '/v1/users/' +\n          encodeURIComponent(userId) +\n          '/playlists/' +\n          playlistId +\n          '/followers/contains'\n      )\n      .withQueryParameters({\n        ids: followerIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check to see if the current user is following one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the artists IDs in the request.\n   *          The boolean value of true indicates that the user is following that artist, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingArtists: function(artistIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/following/contains')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve new releases\n   * @param {Object} [options] Options, being country, limit and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getNewReleases: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/new-releases')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve featured playlists\n   * @param {Object} [options] Options, being country, locale, timestamp, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * featured playlists. Not returned if a callback is given.\n   */\n  getFeaturedPlaylists: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/featured-playlists')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)\n   * @param {Object} [options] Options, being country, locale, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object of categories.\n   * Not returned if a callback is given.\n   */\n  getCategories: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/categories')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve a category.\n   * @param {string} categoryId The id of the category to retrieve.\n   * @param {Object} [options] Options, being country, locale.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a category object.\n   * Not returned if a callback is given.\n   */\n  getCategory: function(categoryId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/categories/' + categoryId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Retrieve playlists for a category.\n   * @param {string} categoryId The id of the category to retrieve playlists for.\n   * @param {Object} [options] Options, being country, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to a paging object containing simple playlists.\n   * Not returned if a callback is given.\n   */\n  getPlaylistsForCategory: function(categoryId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/browse/categories/' + categoryId + '/playlists')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get a show.\n   * @param {string} showId The show's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShow('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the show. Not returned if a callback is given.\n   */\n  getShow: function(showId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n    .withPath('/v1/shows/' + showId)\n    .withQueryParameters(options)\n    .build()\n    .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several shows.\n   * @param {string[]} showIds The IDs of the shows.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShows(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the shows. Not returned if a callback is given.\n   */\n  getShows: function(showIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/shows')\n      .withQueryParameters(\n        {\n          ids: showIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Check if one or more shows is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the show ID in the request.\n   * The boolean value of true indicates that the show is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedShows: function(showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows/contains')\n      .withQueryParameters({\n        ids: showIds.join(',')\n      })\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Remove an show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedShows: function(showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(showIds)\n      .build()\n      .execute(HttpManager.del, callback);\n  },\n\n  /**\n   * Add a show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedShows: function(showIds, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(showIds)\n      .build()\n      .execute(HttpManager.put, callback);\n  },\n\n  /**\n   * Retrieve the shows that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist show objects. Not returned if a callback is given.\n   */\n  getMySavedShows: function(options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/shows')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Get the episodes of an show.\n   * @param showId the show's ID.\n   * @options {Object} [options] The possible options, being limit, offset, and market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShowEpisodes('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    episodes in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */\n  getShowEpisodes: function(showId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/shows/' + showId + '/episodes')\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Search for a show.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchShows('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchShows: function(query, options, callback) {\n    return this.search(query, ['show'], options, callback);\n  },\n\n  /**\n   * Search for an episode.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchEpisodes('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchEpisodes: function(query, options, callback) {\n    return this.search(query, ['episode'], options, callback);\n  },\n\n /**\n   * Look up an episode.\n   * @param {string} episodeId The episode's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisode('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episode. Not returned if a callback is given.\n   */\n  getEpisode: function(episodeId, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/episodes/' + episodeId)\n      .withQueryParameters(options)\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n\n  /**\n   * Look up several episodes.\n   * @param {string[]} episodeIds The IDs of the episodes.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisodes(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episodes. Not returned if a callback is given.\n   */\n  getEpisodes: function(episodeIds, options, callback) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/episodes')\n      .withQueryParameters(\n        {\n          ids: episodeIds.join(',')\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.get, callback);\n  },\n};\n\nSpotifyWebApi._addMethods = function(methods) {\n  for (var i in methods) {\n    if (methods.hasOwnProperty(i)) {\n      this.prototype[i] = methods[i];\n    }\n  }\n};\n\nmodule.exports = SpotifyWebApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}