export interface Analysis {
    brightnessDifference: number;
    colorDifference: number;
    compliant: number;
    contrast: number;
    largeAA: boolean;
    largeAAA: boolean;
    normalAA: boolean;
    normalAAA: boolean;
}
export interface Colors {
    hex: string;
    hsl: HSL;
    rgb: RGB;
}
export declare type ColorTypes = 'hex' | 'hsl' | 'rgb';
export declare type ColorModels = 'hsl' | 'rgb';
export interface FormatOptions {
    alpha?: number;
    model?: ColorModels;
}
export interface HSL {
    h: number;
    s: number;
    l: number;
}
export interface Options {
    model?: ColorModels;
}
export interface PaletteOptions {
    lightness?: number;
    saturation?: number;
    size?: number;
    type?: string;
}
export declare type PlainObject = Record<string, any>;
declare type ReturnModel<T> = T extends 'rgb' ? RGB : HSL;
export declare type Return<T> = T extends 'rgb' | 'hsl' ? ReturnModel<T> : string;
export interface RGB {
    r: number;
    g: number;
    b: number;
}
export declare type RGBArray = [number, number, number];
export declare type Scheme = 'analogous' | 'complementary' | 'rectangle' | 'split' | 'split-complementary' | 'square' | 'tetradic' | 'triadic';
export {};
