"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hex2hsl_1 = require("./hex2hsl");
const hex2rgb_1 = require("./hex2rgb");
const hsl2hex_1 = require("./hsl2hex");
const hsl2rgb_1 = require("./hsl2rgb");
const is_valid_hex_1 = require("./is-valid-hex");
const css_colors_1 = require("./modules/css-colors");
const utils_1 = require("./modules/utils");
const rgb2hex_1 = require("./rgb2hex");
const rgb2hsl_1 = require("./rgb2hsl");
/**
 * Parse CSS color
 */
function parseCSS(input, output) {
    (0, utils_1.invariant)((0, utils_1.isString)(input), utils_1.messages.inputString);
    let result;
    const parsedInput = css_colors_1.cssColors[input.toLowerCase()] || input;
    if ((0, is_valid_hex_1.default)(parsedInput)) {
        switch (output) {
            case 'hsl': {
                result = (0, hex2hsl_1.default)(parsedInput);
                break;
            }
            case 'rgb': {
                result = (0, hex2rgb_1.default)(parsedInput);
                break;
            }
            default: {
                result = parsedInput;
                break;
            }
        }
    }
    else {
        // TODO: improve the pattern to require 3 groups
        const matches = parsedInput.match(/(hsl|rgb)a?\((\d+)(?:,\s*|\s+)(\d+)%?(?:,\s*|\s+)(\d+)%?[^)]*\)/i);
        (0, utils_1.invariant)(Array.isArray(matches), 'invalid CSS string');
        (0, utils_1.invariant)(matches.length === 5, 'invalid CSS string');
        const [, model, hORr, sORg, lORb] = matches;
        let hex;
        let hsl;
        let rgb;
        if (model === 'hsl') {
            hsl = {
                h: parseInt(hORr, 10),
                s: parseInt(sORg, 10),
                l: parseInt(lORb, 10),
            };
            hex = (0, hsl2hex_1.default)(hsl);
            rgb = (0, hsl2rgb_1.default)(hsl);
        }
        else {
            rgb = {
                r: parseInt(hORr, 10),
                g: parseInt(sORg, 10),
                b: parseInt(lORb, 10),
            };
            hex = (0, rgb2hex_1.default)(rgb);
            hsl = (0, rgb2hsl_1.default)(rgb);
        }
        switch (output) {
            case 'hsl': {
                result = hsl;
                break;
            }
            case 'rgb': {
                result = rgb;
                break;
            }
            case 'hex':
            default: {
                result = hex;
                break;
            }
        }
    }
    return result;
}
exports.default = parseCSS;
//# sourceMappingURL=parse-css.js.map