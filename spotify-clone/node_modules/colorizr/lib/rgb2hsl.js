"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./modules/utils");
function rgb2hsl(input) {
    (0, utils_1.invariant)(!!input, utils_1.messages.input);
    let rgb = input;
    if (Array.isArray(input)) {
        rgb = { r: input[0], g: input[1], b: input[2] };
    }
    (0, utils_1.invariant)((0, utils_1.isRGB)(rgb), utils_1.messages.invalid);
    const rLimit = (0, utils_1.limit)(rgb.r, 'r') / 255;
    const gLimit = (0, utils_1.limit)(rgb.g, 'g') / 255;
    const bLimit = (0, utils_1.limit)(rgb.b, 'b') / 255;
    const min = Math.min(rLimit, gLimit, bLimit);
    const max = Math.max(rLimit, gLimit, bLimit);
    const delta = max - min;
    let h = 0;
    let s;
    const l = (max + min) / 2;
    let rate;
    switch (max) {
        case rLimit:
            rate = !delta ? 0 : (gLimit - bLimit) / delta;
            h = 60 * rate;
            break;
        case gLimit:
            rate = (bLimit - rLimit) / delta;
            h = 60 * rate + 120;
            break;
        case bLimit:
            rate = (rLimit - gLimit) / delta;
            h = 60 * rate + 240;
            break;
        /* istanbul ignore next */
        default:
            break;
    }
    if (h < 0) {
        h = 360 + h;
    }
    if (min === max) {
        s = 0;
    }
    else {
        s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);
    }
    return {
        h: Math.abs(+(h % 360).toFixed(2)),
        s: +(s * 100).toFixed(2),
        l: +(l * 100).toFixed(2),
    };
}
exports.default = rgb2hsl;
//# sourceMappingURL=rgb2hsl.js.map