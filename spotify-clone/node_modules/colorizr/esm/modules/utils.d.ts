import { HSL, PlainObject, RGB, RGBArray } from '../types';
export declare const HSLKeys: string[];
export declare const RGBKeys: string[];
/**
 * Constrain value into the range
 */
export declare function constrain(input: number, amount: number, range: number[], sign: string): number;
/**
 * Constrain an angle
 */
export declare function constrainDegrees(input: number, amount: number): number;
/**
 * Parse math string expressions
 */
export declare function expr(input: string): number;
export declare function invariant(condition: boolean, message: string): asserts condition;
/**
 * Check if an object contains HSL values
 */
export declare function isHSL(input: any): input is HSL;
/**
 * Check if the input is a number and not NaN
 */
export declare function isNumber(input: any): input is number;
/**
 * Check if the input is an object
 */
export declare function isPlainObject(input: any): input is PlainObject;
/**
 * Check if an object contains RGB values.
 */
export declare function isRGB(input: any): input is RGB;
/**
 * Check if an array contains RGB values.
 */
export declare function isRGBArray(input: any): input is RGBArray;
/**
 * Check if the input is a string
 */
export declare function isString(input: any): input is string;
/**
 * Limit values per type.
 */
export declare function limit(input: number, type: string): number;
export declare const messages: {
    amount: string;
    left: string;
    right: string;
    input: string;
    inputString: string;
    invalid: string;
    options: string;
};
/**
 * Creates an object composed of the picked source properties.
 */
export declare function pick(input: PlainObject, options: string[]): PlainObject;
/**
 * Round decimal numbers.
 */
export declare function round(input: number, digits?: number): number;
