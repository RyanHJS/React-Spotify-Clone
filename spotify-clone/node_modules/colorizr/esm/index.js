import chroma from './chroma';
import compare from './compare';
import darken from './darken';
import desaturate from './desaturate';
import fade from './fade';
import formatCSS from './format-css';
import lighten from './lighten';
import luminance from './luminance';
import parseColor from './modules/parse-color';
import { invariant } from './modules/utils';
import rotate from './rotate';
import saturate from './saturate';
import textColor from './text-color';
class Colorizr {
    hex;
    model;
    hsl;
    rgb;
    constructor(color, options = {}) {
        invariant(!!color, 'color is required');
        const { model = 'rgb' } = options;
        const { hex, hsl, rgb } = parseColor(color);
        this.model = model;
        this.hex = hex;
        this.hsl = hsl;
        this.rgb = rgb;
    }
    /**
     * Get css string
     */
    get css() {
        return formatCSS(this.hsl, { model: this.model });
    }
    /**
     * Get the red value
     */
    get red() {
        return Number(this.rgb.r);
    }
    /**
     * Get the green value
     */
    get green() {
        return Number(this.rgb.g);
    }
    /**
     * Get the blue value
     */
    get blue() {
        return Number(this.rgb.b);
    }
    /**
     * Get the hue value
     */
    get hue() {
        return Number(this.hsl.h);
    }
    /**
     * Get the saturation value
     */
    get saturation() {
        return Number(this.hsl.s);
    }
    /**
     * Get the lightness value
     */
    get lightness() {
        return Number(this.hsl.l);
    }
    /**
     * Get the luminance value
     */
    get luminance() {
        return luminance(this.hex);
    }
    /**
     * Get the chroma value
     */
    get chroma() {
        return chroma(this.hex);
    }
    /**
     * Get the contrasted color
     */
    get textColor() {
        return textColor(this.hex);
    }
    /**
     * Test 2 colors for compliance
     */
    compare(input) {
        return compare(this.hex, input);
    }
    /**
     * Increase lightness
     */
    lighten(percentage = 10) {
        return lighten(this.hex, percentage);
    }
    /**
     * Decrease lightness
     */
    darken(percentage = 10) {
        return darken(this.hex, percentage);
    }
    /**
     * Increase saturation
     */
    saturate(percentage = 10) {
        return saturate(this.hex, percentage);
    }
    /**
     * Decrease saturation
     */
    desaturate(percentage = 10) {
        return desaturate(this.hex, percentage);
    }
    /**
     * Invert color
     */
    invert() {
        return rotate(this.hex, 180);
    }
    /**
     * Rotate color
     */
    rotate(degrees = 15) {
        return rotate(this.hex, degrees);
    }
    /**
     * Fade color
     */
    fade(percentage = 10) {
        return fade(this.hex, percentage, this.model);
    }
}
export { default as brightnessDifference } from './brightness-difference';
export { default as chroma } from './chroma';
export { default as colorDifference } from './color-difference';
export { default as compare } from './compare';
export { default as contrast } from './contrast';
export { default as darken } from './darken';
export { default as desaturate } from './desaturate';
export { default as fade } from './fade';
export { default as formatCSS } from './format-css';
export { default as formatHex } from './format-hex';
export { default as hex2hsl } from './hex2hsl';
export { default as hex2rgb } from './hex2rgb';
export { default as hsl2hex } from './hsl2hex';
export { default as hsl2rgb } from './hsl2rgb';
export { default as isValidColor } from './is-valid-color';
export { default as isValidHex } from './is-valid-hex';
export { default as lighten } from './lighten';
export { default as luminance } from './luminance';
export { default as name } from './name';
export { default as palette } from './palette';
export { default as parseCSS } from './parse-css';
export { default as random } from './random';
export { default as rgb2hex } from './rgb2hex';
export { default as rgb2hsl } from './rgb2hsl';
export { default as rotate } from './rotate';
export { default as saturate } from './saturate';
export { default as scheme } from './scheme';
export { default as textColor } from './text-color';
export * from './types';
export default Colorizr;
//# sourceMappingURL=index.js.map