import { SpotifyErrorListener, SpotifyPlayerStatus, SpotifyPlayerTrack, SpotifyPlaylist, SpotifyStateListener, SpotifyStatusListener } from './spotify-types';
export * from './spotify-types';
/**
 * Spotify Web Player.
 */
export declare class SpotifyPlayer {
    private readonly _baseUrl;
    private _player?;
    private _name;
    private _volume;
    private _deviceId;
    private _token;
    private _playing;
    private _ready;
    private _position;
    private _track;
    private _playlists;
    private _errorListeners;
    private _stateListeners;
    private _statusListeners;
    /**
     * Required scopes for a token.
     */
    readonly scopes: string[];
    /**
     * The Spotify authorization token.
     */
    get token(): string;
    /**
     * Indicates if a media is playing.
     */
    get playing(): boolean;
    /**
     * Indicates if the player has been initialized and is ready for playing.
     */
    get ready(): boolean;
    /**
     * Current position.
     */
    get position(): number;
    /**
     * The current track.
     */
    get track(): SpotifyPlayerTrack;
    /**
     * A list of playlists owned by the user.
     *
     * Call {@link getUsersPlaylists} to populate this list.
     */
    get playlists(): SpotifyPlaylist[];
    /**
     * Create a new SpotifyPlayer instance.
     * @param name Player name.
     * @param volume Volume level. (default = 1.0)
     */
    constructor(name: string, volume?: number);
    /**
     * Connect to Spotify.
     * @param token Spotify token.
     * @returns `true` if successful, `false` otherwise.
     */
    connect(token: string): Promise<unknown>;
    /**
     * Wait for the player to connect and emit the 'ready' signal.
     *
     * @returns Promise that resolves to a boolean indicating if the connection
     * was successful.
     */
    protected waitForConnection(): Promise<unknown>;
    /** @hidden */
    static loadSpotifyPlayer(): Promise<void>;
    /**
     * Appends a script to spotify-player.js to the DOM.
     * @returns Promise that resolves when the web player script has been loaded.
     */
    protected waitForReady(): Promise<void>;
    /**
     * Begin playback.
     */
    play(items?: string | string[], offset?: number): Promise<void>;
    /**
     * Pause playback.
     */
    pause(): Promise<void>;
    /**
     * Skip to the previous track.
     */
    previous(): Promise<void>;
    /**
     * Skip to the next track.
     */
    next(): Promise<void>;
    /**
     * Seek to position.
     * @param position Starting position (in milliseconds).
     */
    seek(position: number): Promise<void>;
    /**
     * Get current playback state.
     */
    getPlaybackState(): Promise<SpotifyPlayerStatus | null>;
    private getPlaylists;
    private getFavorites;
    /**
     * Get a list of playlists owned by the current user.
     */
    getUsersPlaylists(): Promise<SpotifyPlaylist[]>;
    /**
     * Change the Spotify access token.
     *
     * Useful for handling refreshes.
     * @param token New access token.
     */
    setToken(token: string): void;
    /**
     * Set the current volume level
     * @param volume Volume percentage from 0 to 100.
     */
    setVolume(volume: number): Promise<void>;
    /**
     * Emitted whenever an error has occurred.
     * @event
     */
    addListener(event: 'error', cb: SpotifyErrorListener): void;
    /**
     * Emitted whenever the player state has changed.
     * @event
     */
    addListener(event: 'state', cb: SpotifyStateListener): void;
    /**
     * Emitted whenever the player readiness has changed.
     */
    addListener(event: 'ready', cb: SpotifyStatusListener): void;
    /**
     * Removes a single (or all) error listeners.
     */
    removeListener(event: 'error', cb?: SpotifyErrorListener): void;
    /**
     * Removes a single (or all) state listeners.
     */
    removeListener(event: 'state', cb?: SpotifyStateListener): void;
    /**
     * Removes a single (or all) status listeners.
     */
    removeListener(event: 'ready', cb?: SpotifyStatusListener): void;
    /** @hidden */
    private getAlbumImage;
    /** @hidden */
    private handlePlayerStateChanges;
    /** @hidden */
    private handlePlayerErrors;
}
